pipeline {
    agent any

    environment {
        GIT_URL                = 'https://github.com/kimjieunchol/my-cicd-project.git'
        GIT_BRANCH             = 'main'
        GIT_ID                 = 'skala-github-id'
        IMAGE_NAME             = 'sk066-backend'
        IMAGE_TAG              = '1.0.0'
        IMAGE_REGISTRY_URL     = 'https://amdp-registry.skala-ai.com' // HTTPS 명시
        IMAGE_REGISTRY_PROJECT = 'skala25a'
        DOCKER_CREDENTIAL_ID   = 'skala-image-registry-id'
        K8S_NAMESPACE          = 'skala-practice'

        BUILDAH_ISOLATION      = 'chroot'
        STORAGE_DRIVER         = 'vfs'
    }

    options {
        disableConcurrentBuilds()
        timestamps()
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo '=== Clone Repository ==='
                checkout scm
            }
        }

        stage('Build with Maven') {
            steps {
                echo '=== Build Backend with Maven ==='
                dir('backend') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Compute Image Meta') {
            steps {
                script {
                    def hashcode = sh(script: "date +%s%N | sha256sum | cut -c1-12", returnStdout: true).trim()
                    env.FINAL_IMAGE_TAG = "${IMAGE_TAG}-${hashcode}"
                    env.IMAGE_REGISTRY  = "${IMAGE_REGISTRY_URL.replace('https://','')}/${IMAGE_REGISTRY_PROJECT}"
                    env.IMAGE_REF       = "${IMAGE_REGISTRY}/${IMAGE_NAME}:${FINAL_IMAGE_TAG}"

                    echo "=== Image Metadata ==="
                    echo "REG_HOST: ${IMAGE_REGISTRY_URL}"
                    echo "IMAGE_REF: ${IMAGE_REF}"
                    echo "FINAL_IMAGE_TAG: ${FINAL_IMAGE_TAG}"
                }
            }
        }

        stage('Image Build & Push (Buildah)') {
            steps {
                dir('backend') {
                    script {
                        withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIAL_ID, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PASS')]) {
                            sh """
                                set -eux

                                # self-signed 인증서 경로 설정
                                sudo mkdir -p /etc/containers/certs.d/${IMAGE_REGISTRY_URL.replace('https://','')}
                                sudo cp ../certs/ca.crt /etc/containers/certs.d/${IMAGE_REGISTRY_URL.replace('https://','')}/ca.crt || true

                                # 로그인 재시도
                                for i in 1 2 3; do
                                    echo "Login attempt \$i..."
                                    if echo "\${REGISTRY_PASS}" | sudo -E buildah login --tls-verify=false -u "\${REGISTRY_USER}" --password-stdin ${IMAGE_REGISTRY_URL.replace('https://','')}; then
                                        echo "Login successful!"
                                        break
                                    fi
                                    if [ \$i -eq 3 ]; then
                                        echo "Login failed after 3 attempts"
                                        exit 1
                                    fi
                                    sleep 3
                                done

                                # 이미지 빌드
                                sudo -E buildah bud --format docker --tls-verify=false -t ${IMAGE_REF} -f Dockerfile .

                                # 이미지 푸시
                                sudo -E buildah push --tls-verify=false ${IMAGE_REF}

                                # latest 태그 추가 및 푸시
                                sudo -E buildah tag ${IMAGE_REF} ${IMAGE_REGISTRY}/${IMAGE_NAME}:latest
                                sudo -E buildah push --tls-verify=false ${IMAGE_REGISTRY}/${IMAGE_NAME}:latest

                                # 로그아웃
                                sudo -E buildah logout ${IMAGE_REGISTRY_URL.replace('https://','')} || true
                            """
                        }
                    }
                }
            }
        }

        stage('Update K8s Manifest') {
            steps {
                echo '=== Update Kubernetes Manifest ==='
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo '=== Deploy to Kubernetes ==='
            }
        }
    }

    post {
        always {
            sh '''
                sudo -E buildah rm --all || true
                sudo -E buildah rmi --prune || true
            '''
            cleanWs()
        }
        success { echo '✅ Pipeline succeeded!' }
        failure { echo '❌ Pipeline failed!' }
    }
}
