{"ast":null,"code":"import { PRIORITY_COLORS, PRIORITY_TEXT } from \"./constants\";\n\n// 공지사항 포맷팅\nexport const formatNotices = notices => {\n  if (!notices || notices.length === 0) {\n    return \"죄송합니다. 관련된 공지사항을 찾을 수 없습니다. 다른 키워드로 검색해보시겠어요?\";\n  }\n  let response = \"🔍 검색 결과입니다:\\n\\n\";\n  notices.slice(0, 3).forEach((notice, index) => {\n    const title = `공지사항 #${notice.seq || notice.id}`;\n    response += `${index + 1}. **${title}**\\n`;\n    let content = notice.content || \"\";\n    if (content.length > 150) content = content.substring(0, 150) + \"...\";\n    if (content) response += content + \"\\n\";\n    if (notice.postDate) response += `📅 게시일: ${notice.postDate}\\n`;\n    if (notice.department) response += `🏢 부서: ${notice.department}\\n`;\n    if (notice.contact) response += `📞 연락처: ${notice.contact}\\n`;\n    response += \"\\n\";\n  });\n  if (notices.length > 3) {\n    response += `📝 총 ${notices.length}건의 관련 공지가 더 있습니다.\\n`;\n  }\n  response += \"더 자세한 정보가 필요하시면 구체적으로 질문해 주세요!\";\n  return response;\n};\n\n// 우선순위 색상 가져오기\nexport const getPriorityColor = priority => {\n  return PRIORITY_COLORS[priority] || PRIORITY_COLORS.low;\n};\n\n// 우선순위 텍스트 가져오기\nexport const getPriorityText = priority => {\n  return PRIORITY_TEXT[priority] || PRIORITY_TEXT.low;\n};\n\n// 날짜 포맷팅\nexport const formatDate = date => {\n  return new Date(date).toLocaleDateString(\"ko-KR\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n  });\n};\n\n// 시간 포맷팅\nexport const formatTime = date => {\n  return new Date(date).toLocaleTimeString(\"ko-KR\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n  });\n};","map":{"version":3,"names":["PRIORITY_COLORS","PRIORITY_TEXT","formatNotices","notices","length","response","slice","forEach","notice","index","title","seq","id","content","substring","postDate","department","contact","getPriorityColor","priority","low","getPriorityText","formatDate","date","Date","toLocaleDateString","year","month","day","formatTime","toLocaleTimeString","hour","minute"],"sources":["C:/workspace/a_hub_project/frontend/src/utils/formatters.js"],"sourcesContent":["import { PRIORITY_COLORS, PRIORITY_TEXT } from \"./constants\";\r\n\r\n// 공지사항 포맷팅\r\nexport const formatNotices = (notices) => {\r\n  if (!notices || notices.length === 0) {\r\n    return \"죄송합니다. 관련된 공지사항을 찾을 수 없습니다. 다른 키워드로 검색해보시겠어요?\";\r\n  }\r\n\r\n  let response = \"🔍 검색 결과입니다:\\n\\n\";\r\n\r\n  notices.slice(0, 3).forEach((notice, index) => {\r\n    const title = `공지사항 #${notice.seq || notice.id}`;\r\n    response += `${index + 1}. **${title}**\\n`;\r\n\r\n    let content = notice.content || \"\";\r\n    if (content.length > 150) content = content.substring(0, 150) + \"...\";\r\n    if (content) response += content + \"\\n\";\r\n\r\n    if (notice.postDate) response += `📅 게시일: ${notice.postDate}\\n`;\r\n    if (notice.department) response += `🏢 부서: ${notice.department}\\n`;\r\n    if (notice.contact) response += `📞 연락처: ${notice.contact}\\n`;\r\n\r\n    response += \"\\n\";\r\n  });\r\n\r\n  if (notices.length > 3) {\r\n    response += `📝 총 ${notices.length}건의 관련 공지가 더 있습니다.\\n`;\r\n  }\r\n\r\n  response += \"더 자세한 정보가 필요하시면 구체적으로 질문해 주세요!\";\r\n  return response;\r\n};\r\n\r\n// 우선순위 색상 가져오기\r\nexport const getPriorityColor = (priority) => {\r\n  return PRIORITY_COLORS[priority] || PRIORITY_COLORS.low;\r\n};\r\n\r\n// 우선순위 텍스트 가져오기\r\nexport const getPriorityText = (priority) => {\r\n  return PRIORITY_TEXT[priority] || PRIORITY_TEXT.low;\r\n};\r\n\r\n// 날짜 포맷팅\r\nexport const formatDate = (date) => {\r\n  return new Date(date).toLocaleDateString(\"ko-KR\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n};\r\n\r\n// 시간 포맷팅\r\nexport const formatTime = (date) => {\r\n  return new Date(date).toLocaleTimeString(\"ko-KR\", {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n  });\r\n};\r\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,aAAa,QAAQ,aAAa;;AAE5D;AACA,OAAO,MAAMC,aAAa,GAAIC,OAAO,IAAK;EACxC,IAAI,CAACA,OAAO,IAAIA,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IACpC,OAAO,+CAA+C;EACxD;EAEA,IAAIC,QAAQ,GAAG,kBAAkB;EAEjCF,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;IAC7C,MAAMC,KAAK,GAAG,SAASF,MAAM,CAACG,GAAG,IAAIH,MAAM,CAACI,EAAE,EAAE;IAChDP,QAAQ,IAAI,GAAGI,KAAK,GAAG,CAAC,OAAOC,KAAK,MAAM;IAE1C,IAAIG,OAAO,GAAGL,MAAM,CAACK,OAAO,IAAI,EAAE;IAClC,IAAIA,OAAO,CAACT,MAAM,GAAG,GAAG,EAAES,OAAO,GAAGA,OAAO,CAACC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK;IACrE,IAAID,OAAO,EAAER,QAAQ,IAAIQ,OAAO,GAAG,IAAI;IAEvC,IAAIL,MAAM,CAACO,QAAQ,EAAEV,QAAQ,IAAI,WAAWG,MAAM,CAACO,QAAQ,IAAI;IAC/D,IAAIP,MAAM,CAACQ,UAAU,EAAEX,QAAQ,IAAI,UAAUG,MAAM,CAACQ,UAAU,IAAI;IAClE,IAAIR,MAAM,CAACS,OAAO,EAAEZ,QAAQ,IAAI,WAAWG,MAAM,CAACS,OAAO,IAAI;IAE7DZ,QAAQ,IAAI,IAAI;EAClB,CAAC,CAAC;EAEF,IAAIF,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IACtBC,QAAQ,IAAI,QAAQF,OAAO,CAACC,MAAM,qBAAqB;EACzD;EAEAC,QAAQ,IAAI,gCAAgC;EAC5C,OAAOA,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMa,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C,OAAOnB,eAAe,CAACmB,QAAQ,CAAC,IAAInB,eAAe,CAACoB,GAAG;AACzD,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAIF,QAAQ,IAAK;EAC3C,OAAOlB,aAAa,CAACkB,QAAQ,CAAC,IAAIlB,aAAa,CAACmB,GAAG;AACrD,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAIC,IAAI,IAAK;EAClC,OAAO,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;IAChDC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE;EACP,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAIN,IAAI,IAAK;EAClC,OAAO,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACO,kBAAkB,CAAC,OAAO,EAAE;IAChDC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}