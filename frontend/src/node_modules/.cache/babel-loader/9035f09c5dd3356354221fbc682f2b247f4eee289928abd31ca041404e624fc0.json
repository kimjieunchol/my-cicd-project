{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\a_hub_project\\\\frontend\\\\src\\\\components\\\\chat\\\\ChatView.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport useChat from \"../../hooks/useChat\";\nimport useConnection from \"../../hooks/useConnection\";\n\n// 컴포넌트들을 하나씩 주석 해제하면서 테스트하세요\nimport ChatHeader from \"./ChatHeader\";\nimport ChatMessage from \"./ChatMessage\";\nimport TypingIndicator from \"./TypingIndicator\";\nimport ChatInput from \"./ChatInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatView = () => {\n  _s();\n  const {\n    messages,\n    isTyping,\n    sendMessage\n  } = useChat();\n  const {\n    status,\n    error,\n    check\n  } = useConnection();\n  const [input, setInput] = React.useState(\"\");\n  const messagesEndRef = useRef(null);\n\n  // 메시지 추가 시 자동 스크롤\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages, isTyping]);\n\n  // 메시지 전송 핸들러\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const message = input;\n    setInput(\"\");\n    await sendMessage(message);\n  };\n\n  // 추천 질문\n  const suggestions = [\"최신 공지 알려줘\", \"중요 공지가 뭐야?\", \"내 부서 공지는?\"];\n  const isConnected = status === \"connected\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      status: status,\n      error: error,\n      onRefresh: check\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50\",\n      children: [messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        msg: msg\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(TypingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      input: input,\n      setInput: setInput,\n      onSend: handleSend,\n      isConnected: isConnected,\n      suggestions: suggestions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatView, \"HVv4cNoWFIZYOC98Wm0rPr9dcNI=\", false, function () {\n  return [useChat, useConnection];\n});\n_c = ChatView;\nexport default ChatView;\nvar _c;\n$RefreshReg$(_c, \"ChatView\");","map":{"version":3,"names":["React","useRef","useEffect","useChat","useConnection","ChatHeader","ChatMessage","TypingIndicator","ChatInput","jsxDEV","_jsxDEV","ChatView","_s","messages","isTyping","sendMessage","status","error","check","input","setInput","useState","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSend","trim","message","suggestions","isConnected","className","children","onRefresh","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","id","ref","onSend","_c","$RefreshReg$"],"sources":["C:/workspace/a_hub_project/frontend/src/components/chat/ChatView.jsx"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport useChat from \"../../hooks/useChat\";\r\nimport useConnection from \"../../hooks/useConnection\";\r\n\r\n// 컴포넌트들을 하나씩 주석 해제하면서 테스트하세요\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport TypingIndicator from \"./TypingIndicator\";\r\nimport ChatInput from \"./ChatInput\";\r\n\r\nconst ChatView = () => {\r\n  const { messages, isTyping, sendMessage } = useChat();\r\n  const { status, error, check } = useConnection();\r\n  const [input, setInput] = React.useState(\"\");\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // 메시지 추가 시 자동 스크롤\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages, isTyping]);\r\n\r\n  // 메시지 전송 핸들러\r\n  const handleSend = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const message = input;\r\n    setInput(\"\");\r\n    await sendMessage(message);\r\n  };\r\n\r\n  // 추천 질문\r\n  const suggestions = [\r\n    \"최신 공지 알려줘\",\r\n    \"중요 공지가 뭐야?\",\r\n    \"내 부서 공지는?\",\r\n  ];\r\n\r\n  const isConnected = status === \"connected\";\r\n\r\n  return (\r\n    <div className=\"h-full flex flex-col\">\r\n      {/* 헤더 */}\r\n      <ChatHeader status={status} error={error} onRefresh={check} />\r\n\r\n      {/* 메시지 영역 */}\r\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50\">\r\n        {messages.map((msg) => (\r\n          <ChatMessage key={msg.id} msg={msg} />\r\n        ))}\r\n\r\n        {isTyping && <TypingIndicator />}\r\n\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      {/* 입력 영역 */}\r\n      <ChatInput\r\n        input={input}\r\n        setInput={setInput}\r\n        onSend={handleSend}\r\n        isConnected={isConnected}\r\n        suggestions={suggestions}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}