pipeline {
  agent any

  environment {
    GIT_URL                = 'https://github.com/kimjieunchol/my-cicd-project.git'
    GIT_BRANCH             = 'main'
    GIT_ID                 = 'skala-github-id'
    IMAGE_NAME             = 'sk066-my-cicd-project'
    IMAGE_TAG              = '1.0.0'
    IMAGE_REGISTRY_URL     = 'amdp-registry.skala-ai.com'
    IMAGE_REGISTRY_PROJECT = 'skala25a'
    DOCKER_CREDENTIAL_ID   = 'skala-image-registry-id'
    K8S_NAMESPACE          = 'skala-practice'
  }

  options {
    disableConcurrentBuilds()
    timestamps()
  }

  stages {
    stage('Clone Repository') {
      steps {
        git branch: "${GIT_BRANCH}", url: "${GIT_URL}", credentialsId: "${GIT_ID}"
        sh 'ls -al'
      }
    }

    stage('Build with Maven') {
      steps {
        sh 'mvn clean package -DskipTests'
      }
    }

    stage('Compute Image Meta') {
      steps {
        script {
          def hashcode = sh(script: "date +%s%N | sha256sum | cut -c1-12", returnStdout: true).trim()
          env.FINAL_IMAGE_TAG = "${IMAGE_TAG}-${hashcode}"
          env.IMAGE_REGISTRY  = "${IMAGE_REGISTRY_URL}/${IMAGE_REGISTRY_PROJECT}"
          env.IMAGE_REF       = "${env.IMAGE_REGISTRY}/${IMAGE_NAME}:${env.FINAL_IMAGE_TAG}"

          echo "REGISTRY: ${env.IMAGE_REGISTRY}"
          echo "IMAGE_REF: ${env.IMAGE_REF}"
        }
      }
    }

    stage('Image Build & Push') {
      steps {
        script {
          docker.withRegistry("https://${IMAGE_REGISTRY_URL}", "${DOCKER_CREDENTIAL_ID}") {
            def appImage = docker.build("${IMAGE_REF}", "--platform=linux/amd64 .")
            appImage.push()
            appImage.push("latest")
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        sh '''
          set -eux
          test -f ./k8s/deployment.yaml

          echo "--- BEFORE ---"
          grep -n 'image:' ./k8s/deployment.yaml || true

          sed -Ei "s#(image:[[:space:]]*$IMAGE_REGISTRY/$IMAGE_NAME)[^[:space:]]+#\\1:$FINAL_IMAGE_TAG#" ./k8s/deployment.yaml

          echo "--- AFTER ---"
          grep -n 'image:' ./k8s/deployment.yaml || true

          kubectl apply -n ${K8S_NAMESPACE} -f ./k8s/
          kubectl rollout status -n ${K8S_NAMESPACE} deployment/${IMAGE_NAME}
        '''
      }
    }
  }

  post {
    success {
      echo '✅ Backend Pipeline succeeded!'
    }
    failure {
      echo '❌ Backend Pipeline failed!'
    }
    always {
      cleanWs()
    }
  }
}
