{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { getAllSchedules } from \"../services/api\";\nconst useSchedule = () => {\n  _s();\n  const [schedules, setSchedules] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  // 초기 스케줄 불러오기\n  useEffect(() => {\n    const loadSchedules = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const data = await getAllSchedules();\n        setSchedules(data);\n      } catch (err) {\n        console.error(\"Failed to load schedules:\", err);\n        setError(\"스케줄을 불러오는데 실패했습니다.\");\n\n        // 에러 시 샘플 데이터\n        const sampleData = [{\n          id: 1,\n          title: \"팀 회의\",\n          date: \"2025-09-30\",\n          time: \"14:00\",\n          type: \"meeting\",\n          description: \"주간 팀 회의\"\n        }, {\n          id: 2,\n          title: \"프로젝트 발표\",\n          date: \"2025-10-05\",\n          time: \"10:00\",\n          type: \"presentation\",\n          description: \"분기 프로젝트 발표\"\n        }, {\n          id: 3,\n          title: \"점심 약속\",\n          date: \"2025-10-10\",\n          time: \"12:00\",\n          type: \"personal\",\n          description: \"클라이언트 미팅\"\n        }];\n        setSchedules(sampleData);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadSchedules();\n  }, []);\n\n  // 특정 날짜의 스케줄 가져오기\n  const getSchedulesForDate = date => {\n    const dateStr = date.toISOString().split(\"T\")[0];\n    return schedules.filter(schedule => schedule.date === dateStr);\n  };\n\n  // 스케줄 추가\n  const addSchedule = schedule => {\n    const newSchedule = {\n      ...schedule,\n      id: Date.now()\n    };\n    setSchedules(prev => [...prev, newSchedule]);\n  };\n\n  // 스케줄 수정\n  const updateSchedule = (id, updatedSchedule) => {\n    setSchedules(prev => prev.map(schedule => schedule.id === id ? {\n      ...schedule,\n      ...updatedSchedule\n    } : schedule));\n  };\n\n  // 스케줄 삭제\n  const deleteSchedule = id => {\n    setSchedules(prev => prev.filter(schedule => schedule.id !== id));\n  };\n\n  // 새로고침\n  const refresh = async () => {\n    setLoading(true);\n    try {\n      const data = await getAllSchedules();\n      setSchedules(data);\n      setError(null);\n    } catch (err) {\n      setError(\"새로고침 실패\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    schedules,\n    loading,\n    error,\n    selectedDate,\n    setSelectedDate,\n    getSchedulesForDate,\n    addSchedule,\n    updateSchedule,\n    deleteSchedule,\n    refresh\n  };\n};\n_s(useSchedule, \"6IYOs6mPNLfz5VctErEmqX+ZLwU=\");\nexport default useSchedule;","map":{"version":3,"names":["useState","useEffect","getAllSchedules","useSchedule","_s","schedules","setSchedules","loading","setLoading","error","setError","selectedDate","setSelectedDate","Date","loadSchedules","data","err","console","sampleData","id","title","date","time","type","description","getSchedulesForDate","dateStr","toISOString","split","filter","schedule","addSchedule","newSchedule","now","prev","updateSchedule","updatedSchedule","map","deleteSchedule","refresh"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useSchedule.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { getAllSchedules } from \"../services/api\";\r\n\r\nconst useSchedule = () => {\r\n  const [schedules, setSchedules] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\n  // 초기 스케줄 불러오기\r\n  useEffect(() => {\r\n    const loadSchedules = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const data = await getAllSchedules();\r\n        setSchedules(data);\r\n      } catch (err) {\r\n        console.error(\"Failed to load schedules:\", err);\r\n        setError(\"스케줄을 불러오는데 실패했습니다.\");\r\n\r\n        // 에러 시 샘플 데이터\r\n        const sampleData = [\r\n          {\r\n            id: 1,\r\n            title: \"팀 회의\",\r\n            date: \"2025-09-30\",\r\n            time: \"14:00\",\r\n            type: \"meeting\",\r\n            description: \"주간 팀 회의\",\r\n          },\r\n          {\r\n            id: 2,\r\n            title: \"프로젝트 발표\",\r\n            date: \"2025-10-05\",\r\n            time: \"10:00\",\r\n            type: \"presentation\",\r\n            description: \"분기 프로젝트 발표\",\r\n          },\r\n          {\r\n            id: 3,\r\n            title: \"점심 약속\",\r\n            date: \"2025-10-10\",\r\n            time: \"12:00\",\r\n            type: \"personal\",\r\n            description: \"클라이언트 미팅\",\r\n          },\r\n        ];\r\n        setSchedules(sampleData);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadSchedules();\r\n  }, []);\r\n\r\n  // 특정 날짜의 스케줄 가져오기\r\n  const getSchedulesForDate = (date) => {\r\n    const dateStr = date.toISOString().split(\"T\")[0];\r\n    return schedules.filter((schedule) => schedule.date === dateStr);\r\n  };\r\n\r\n  // 스케줄 추가\r\n  const addSchedule = (schedule) => {\r\n    const newSchedule = {\r\n      ...schedule,\r\n      id: Date.now(),\r\n    };\r\n    setSchedules((prev) => [...prev, newSchedule]);\r\n  };\r\n\r\n  // 스케줄 수정\r\n  const updateSchedule = (id, updatedSchedule) => {\r\n    setSchedules((prev) =>\r\n      prev.map((schedule) =>\r\n        schedule.id === id ? { ...schedule, ...updatedSchedule } : schedule\r\n      )\r\n    );\r\n  };\r\n\r\n  // 스케줄 삭제\r\n  const deleteSchedule = (id) => {\r\n    setSchedules((prev) => prev.filter((schedule) => schedule.id !== id));\r\n  };\r\n\r\n  // 새로고침\r\n  const refresh = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getAllSchedules();\r\n      setSchedules(data);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(\"새로고침 실패\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    schedules,\r\n    loading,\r\n    error,\r\n    selectedDate,\r\n    setSelectedDate,\r\n    getSchedulesForDate,\r\n    addSchedule,\r\n    updateSchedule,\r\n    deleteSchedule,\r\n    refresh,\r\n  };\r\n};\r\n\r\nexport default useSchedule;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,eAAe,QAAQ,iBAAiB;AAEjD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAIa,IAAI,CAAC,CAAC,CAAC;;EAE5D;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChCN,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,MAAMK,IAAI,GAAG,MAAMb,eAAe,CAAC,CAAC;QACpCI,YAAY,CAACS,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACR,KAAK,CAAC,2BAA2B,EAAEO,GAAG,CAAC;QAC/CN,QAAQ,CAAC,oBAAoB,CAAC;;QAE9B;QACA,MAAMQ,UAAU,GAAG,CACjB;UACEC,EAAE,EAAE,CAAC;UACLC,KAAK,EAAE,MAAM;UACbC,IAAI,EAAE,YAAY;UAClBC,IAAI,EAAE,OAAO;UACbC,IAAI,EAAE,SAAS;UACfC,WAAW,EAAE;QACf,CAAC,EACD;UACEL,EAAE,EAAE,CAAC;UACLC,KAAK,EAAE,SAAS;UAChBC,IAAI,EAAE,YAAY;UAClBC,IAAI,EAAE,OAAO;UACbC,IAAI,EAAE,cAAc;UACpBC,WAAW,EAAE;QACf,CAAC,EACD;UACEL,EAAE,EAAE,CAAC;UACLC,KAAK,EAAE,OAAO;UACdC,IAAI,EAAE,YAAY;UAClBC,IAAI,EAAE,OAAO;UACbC,IAAI,EAAE,UAAU;UAChBC,WAAW,EAAE;QACf,CAAC,CACF;QACDlB,YAAY,CAACY,UAAU,CAAC;MAC1B,CAAC,SAAS;QACRV,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDM,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMW,mBAAmB,GAAIJ,IAAI,IAAK;IACpC,MAAMK,OAAO,GAAGL,IAAI,CAACM,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChD,OAAOvB,SAAS,CAACwB,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACT,IAAI,KAAKK,OAAO,CAAC;EAClE,CAAC;;EAED;EACA,MAAMK,WAAW,GAAID,QAAQ,IAAK;IAChC,MAAME,WAAW,GAAG;MAClB,GAAGF,QAAQ;MACXX,EAAE,EAAEN,IAAI,CAACoB,GAAG,CAAC;IACf,CAAC;IACD3B,YAAY,CAAE4B,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEF,WAAW,CAAC,CAAC;EAChD,CAAC;;EAED;EACA,MAAMG,cAAc,GAAGA,CAAChB,EAAE,EAAEiB,eAAe,KAAK;IAC9C9B,YAAY,CAAE4B,IAAI,IAChBA,IAAI,CAACG,GAAG,CAAEP,QAAQ,IAChBA,QAAQ,CAACX,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGW,QAAQ;MAAE,GAAGM;IAAgB,CAAC,GAAGN,QAC7D,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMQ,cAAc,GAAInB,EAAE,IAAK;IAC7Bb,YAAY,CAAE4B,IAAI,IAAKA,IAAI,CAACL,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACX,EAAE,KAAKA,EAAE,CAAC,CAAC;EACvE,CAAC;;EAED;EACA,MAAMoB,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B/B,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMO,IAAI,GAAG,MAAMb,eAAe,CAAC,CAAC;MACpCI,YAAY,CAACS,IAAI,CAAC;MAClBL,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZN,QAAQ,CAAC,SAAS,CAAC;IACrB,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IACLH,SAAS;IACTE,OAAO;IACPE,KAAK;IACLE,YAAY;IACZC,eAAe;IACfa,mBAAmB;IACnBM,WAAW;IACXI,cAAc;IACdG,cAAc;IACdC;EACF,CAAC;AACH,CAAC;AAACnC,EAAA,CA9GID,WAAW;AAgHjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}