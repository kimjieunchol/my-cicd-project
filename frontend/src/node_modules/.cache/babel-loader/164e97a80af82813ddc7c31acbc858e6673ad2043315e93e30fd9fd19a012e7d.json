{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { checkServerStatus } from \"../services/api\";\nconst useConnection = () => {\n  _s();\n  const [status, setStatus] = useState(\"disconnected\");\n  const [error, setError] = useState(null);\n\n  // 서버 상태 확인 함수\n  const check = useCallback(async () => {\n    setStatus(\"connecting\");\n    setError(null);\n    try {\n      const isConnected = await checkServerStatus();\n      if (isConnected) {\n        setStatus(\"connected\");\n        setError(null);\n      } else {\n        throw new Error(\"서버 응답 없음\");\n      }\n    } catch (err) {\n      console.error(\"Server check failed:\", err);\n      setStatus(\"disconnected\");\n      setError(\"서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.\");\n    }\n  }, []);\n\n  // 컴포넌트 마운트 시 서버 상태 확인\n  useEffect(() => {\n    check();\n  }, [check]);\n  return {\n    status,\n    error,\n    check\n  };\n};\n_s(useConnection, \"VDivJqNzyogWn09IF9dMtigwLh4=\");\nexport default useConnection;","map":{"version":3,"names":["useState","useEffect","useCallback","checkServerStatus","useConnection","_s","status","setStatus","error","setError","check","isConnected","Error","err","console"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useConnection.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport { checkServerStatus } from \"../services/api\";\r\n\r\nconst useConnection = () => {\r\n  const [status, setStatus] = useState(\"disconnected\");\r\n  const [error, setError] = useState(null);\r\n\r\n  // 서버 상태 확인 함수\r\n  const check = useCallback(async () => {\r\n    setStatus(\"connecting\");\r\n    setError(null);\r\n\r\n    try {\r\n      const isConnected = await checkServerStatus();\r\n\r\n      if (isConnected) {\r\n        setStatus(\"connected\");\r\n        setError(null);\r\n      } else {\r\n        throw new Error(\"서버 응답 없음\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Server check failed:\", err);\r\n      setStatus(\"disconnected\");\r\n      setError(\"서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.\");\r\n    }\r\n  }, []);\r\n\r\n  // 컴포넌트 마운트 시 서버 상태 확인\r\n  useEffect(() => {\r\n    check();\r\n  }, [check]);\r\n\r\n  return {\r\n    status,\r\n    error,\r\n    check,\r\n  };\r\n};\r\n\r\nexport default useConnection;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,iBAAiB,QAAQ,iBAAiB;AAEnD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,cAAc,CAAC;EACpD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMU,KAAK,GAAGR,WAAW,CAAC,YAAY;IACpCK,SAAS,CAAC,YAAY,CAAC;IACvBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAME,WAAW,GAAG,MAAMR,iBAAiB,CAAC,CAAC;MAE7C,IAAIQ,WAAW,EAAE;QACfJ,SAAS,CAAC,WAAW,CAAC;QACtBE,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,MAAM;QACL,MAAM,IAAIG,KAAK,CAAC,UAAU,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACN,KAAK,CAAC,sBAAsB,EAAEK,GAAG,CAAC;MAC1CN,SAAS,CAAC,cAAc,CAAC;MACzBE,QAAQ,CAAC,oCAAoC,CAAC;IAChD;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAR,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,CAAC;EACT,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,OAAO;IACLJ,MAAM;IACNE,KAAK;IACLE;EACF,CAAC;AACH,CAAC;AAACL,EAAA,CAnCID,aAAa;AAqCnB,eAAeA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}