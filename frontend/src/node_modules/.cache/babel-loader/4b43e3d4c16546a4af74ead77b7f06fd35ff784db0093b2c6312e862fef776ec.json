{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useScheduleCalendar.js\nimport { useState, useEffect } from \"react\";\nimport * as api from \"../services/api\";\nconst useScheduleCalendar = user => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  useEffect(() => {\n    if (!user) return;\n\n    // 함수 내부로 선언해서 useEffect 의존성 경고 제거\n    const loadData = async () => {\n      try {\n        setLoading(true);\n\n        // 스케줄 가져오기\n        const schedules = await api.getUserSchedules(user.id);\n        setTasks(schedules);\n        const scheduleEvents = schedules.map(schedule => ({\n          id: `schedule-${schedule.id}`,\n          date: new Date(schedule.dueDate),\n          title: schedule.title,\n          type: \"schedule\",\n          priority: schedule.priority,\n          completed: schedule.completed\n        }));\n\n        // 이벤트 가져오기\n        const calendarData = await api.getUserEvents(user.id);\n        const calendarEvents = calendarData.map(event => ({\n          id: `event-${event.id}`,\n          date: new Date(event.eventDate),\n          title: event.title,\n          type: event.eventType || \"event\",\n          time: event.eventTime\n        }));\n\n        // 이벤트 합치기\n        setEvents([...scheduleEvents, ...calendarEvents]);\n      } catch (err) {\n        console.error(err);\n        setError(\"데이터 불러오기에 실패했습니다.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadData();\n  }, [user]);\n\n  // ---------- 2️⃣ 할 일 추가 ----------\n  const addTask = async () => {\n    if (!newTask.trim()) return; // 제목이 없으면 종료\n    if (!user || !user.id) return; // 사용자 정보 없으면 종료\n\n    try {\n      const savedTask = await createSchedule({\n        userId: user.id,\n        // ⚡ 여기 필수\n        title: newTask,\n        priority: \"medium\",\n        dueDate: new Date().toISOString().split(\"T\")[0],\n        description: \"\"\n      });\n      setTasks(prev => [...prev, savedTask]);\n      setNewTask(\"\");\n    } catch (error) {\n      console.error(\"작업 추가 실패:\", error);\n    }\n  };\n\n  // ---------- 3️⃣ 완료 토글 ----------\n  const toggleComplete = async id => {\n    try {\n      const updatedTask = await api.toggleCompleteSchedule(id);\n      setTasks(prev => prev.map(task => task.id === id ? updatedTask : task));\n      setEvents(prev => prev.map(event => event.id === `schedule-${id}` ? {\n        ...event,\n        completed: updatedTask.completed\n      } : event));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // ---------- 4️⃣ 삭제 ----------\n  const deleteTask = async id => {\n    try {\n      await api.deleteSchedule(id);\n      setTasks(prev => prev.filter(task => task.id !== id));\n      setEvents(prev => prev.filter(event => event.id !== `schedule-${id}`));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // ---------- 5️⃣ 캘린더 헬퍼 ----------\n  const getDaysInMonth = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const firstDay = new Date(year, month, 1).getDay();\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    return {\n      firstDay,\n      daysInMonth\n    };\n  };\n  const getEventsForDate = day => {\n    const targetDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n    return events.filter(event => event.date.getDate() === targetDate.getDate() && event.date.getMonth() === targetDate.getMonth() && event.date.getFullYear() === targetDate.getFullYear());\n  };\n  const prevMonth = () => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1));\n  const nextMonth = () => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1));\n  return {\n    tasks,\n    newTask,\n    setNewTask,\n    addTask,\n    toggleComplete,\n    deleteTask,\n    currentDate,\n    events,\n    getDaysInMonth,\n    getEventsForDate,\n    prevMonth,\n    nextMonth,\n    loading,\n    error,\n    refresh: () => {\n      if (user) {\n        api.getUserSchedules(user.id).then(setTasks).catch(console.error);\n        api.getUserEvents(user.id).then(setEvents).catch(console.error);\n      }\n    }\n  };\n};\n_s(useScheduleCalendar, \"MNPxt+TEDte3EIvGJ8iD8fSlstM=\");\nexport default useScheduleCalendar;","map":{"version":3,"names":["useState","useEffect","api","useScheduleCalendar","user","_s","tasks","setTasks","events","setEvents","newTask","setNewTask","loading","setLoading","error","setError","currentDate","setCurrentDate","Date","loadData","schedules","getUserSchedules","id","scheduleEvents","map","schedule","date","dueDate","title","type","priority","completed","calendarData","getUserEvents","calendarEvents","event","eventDate","eventType","time","eventTime","err","console","addTask","trim","savedTask","createSchedule","userId","toISOString","split","description","prev","toggleComplete","updatedTask","toggleCompleteSchedule","task","deleteTask","deleteSchedule","filter","getDaysInMonth","year","getFullYear","month","getMonth","firstDay","getDay","daysInMonth","getDate","getEventsForDate","day","targetDate","prevMonth","nextMonth","refresh","then","catch"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useScheduleCalendar.js"],"sourcesContent":["// src/hooks/useScheduleCalendar.js\r\nimport { useState, useEffect } from \"react\";\r\nimport * as api from \"../services/api\";\r\n\r\nconst useScheduleCalendar = (user) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [events, setEvents] = useState([]);\r\n  const [newTask, setNewTask] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    // 함수 내부로 선언해서 useEffect 의존성 경고 제거\r\n    const loadData = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // 스케줄 가져오기\r\n        const schedules = await api.getUserSchedules(user.id);\r\n        setTasks(schedules);\r\n\r\n        const scheduleEvents = schedules.map((schedule) => ({\r\n          id: `schedule-${schedule.id}`,\r\n          date: new Date(schedule.dueDate),\r\n          title: schedule.title,\r\n          type: \"schedule\",\r\n          priority: schedule.priority,\r\n          completed: schedule.completed,\r\n        }));\r\n\r\n        // 이벤트 가져오기\r\n        const calendarData = await api.getUserEvents(user.id);\r\n        const calendarEvents = calendarData.map((event) => ({\r\n          id: `event-${event.id}`,\r\n          date: new Date(event.eventDate),\r\n          title: event.title,\r\n          type: event.eventType || \"event\",\r\n          time: event.eventTime,\r\n        }));\r\n\r\n        // 이벤트 합치기\r\n        setEvents([...scheduleEvents, ...calendarEvents]);\r\n      } catch (err) {\r\n        console.error(err);\r\n        setError(\"데이터 불러오기에 실패했습니다.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, [user]);\r\n\r\n  // ---------- 2️⃣ 할 일 추가 ----------\r\n  const addTask = async () => {\r\n    if (!newTask.trim()) return; // 제목이 없으면 종료\r\n    if (!user || !user.id) return; // 사용자 정보 없으면 종료\r\n\r\n    try {\r\n      const savedTask = await createSchedule({\r\n        userId: user.id, // ⚡ 여기 필수\r\n        title: newTask,\r\n        priority: \"medium\",\r\n        dueDate: new Date().toISOString().split(\"T\")[0],\r\n        description: \"\",\r\n      });\r\n\r\n      setTasks((prev) => [...prev, savedTask]);\r\n      setNewTask(\"\");\r\n    } catch (error) {\r\n      console.error(\"작업 추가 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // ---------- 3️⃣ 완료 토글 ----------\r\n  const toggleComplete = async (id) => {\r\n    try {\r\n      const updatedTask = await api.toggleCompleteSchedule(id);\r\n      setTasks((prev) =>\r\n        prev.map((task) => (task.id === id ? updatedTask : task))\r\n      );\r\n      setEvents((prev) =>\r\n        prev.map((event) =>\r\n          event.id === `schedule-${id}`\r\n            ? { ...event, completed: updatedTask.completed }\r\n            : event\r\n        )\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // ---------- 4️⃣ 삭제 ----------\r\n  const deleteTask = async (id) => {\r\n    try {\r\n      await api.deleteSchedule(id);\r\n      setTasks((prev) => prev.filter((task) => task.id !== id));\r\n      setEvents((prev) =>\r\n        prev.filter((event) => event.id !== `schedule-${id}`)\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // ---------- 5️⃣ 캘린더 헬퍼 ----------\r\n  const getDaysInMonth = () => {\r\n    const year = currentDate.getFullYear();\r\n    const month = currentDate.getMonth();\r\n    const firstDay = new Date(year, month, 1).getDay();\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n    return { firstDay, daysInMonth };\r\n  };\r\n\r\n  const getEventsForDate = (day) => {\r\n    const targetDate = new Date(\r\n      currentDate.getFullYear(),\r\n      currentDate.getMonth(),\r\n      day\r\n    );\r\n    return events.filter(\r\n      (event) =>\r\n        event.date.getDate() === targetDate.getDate() &&\r\n        event.date.getMonth() === targetDate.getMonth() &&\r\n        event.date.getFullYear() === targetDate.getFullYear()\r\n    );\r\n  };\r\n\r\n  const prevMonth = () =>\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() - 1)\r\n    );\r\n\r\n  const nextMonth = () =>\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() + 1)\r\n    );\r\n\r\n  return {\r\n    tasks,\r\n    newTask,\r\n    setNewTask,\r\n    addTask,\r\n    toggleComplete,\r\n    deleteTask,\r\n    currentDate,\r\n    events,\r\n    getDaysInMonth,\r\n    getEventsForDate,\r\n    prevMonth,\r\n    nextMonth,\r\n    loading,\r\n    error,\r\n    refresh: () => {\r\n      if (user) {\r\n        api.getUserSchedules(user.id).then(setTasks).catch(console.error);\r\n        api.getUserEvents(user.id).then(setEvents).catch(console.error);\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nexport default useScheduleCalendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}