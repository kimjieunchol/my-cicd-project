pipeline {
    agent any

    environment {
        // === 사용자 수정 영역 ===
        GIT_URL                = 'https://github.com/kimjieunchol/my-cicd-project.git'
        GIT_BRANCH             = 'main'
        GIT_ID                 = 'skala-github-id'
        IMAGE_NAME             = 'sk066-my-cicd-project'
        IMAGE_TAG              = '1.0.0'
        IMAGE_REGISTRY_URL     = 'amdp-registry.skala-ai.com'
        IMAGE_REGISTRY_PROJECT = 'skala25a'
        DOCKER_CREDENTIAL_ID   = 'skala-image-registry-id'
        K8S_NAMESPACE          = 'skala-practice'
    }

    options {
        disableConcurrentBuilds()
        timestamps()
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo '=== Clone Repository ==='
                git branch: "${GIT_BRANCH}", url: "${GIT_URL}", credentialsId: "${GIT_ID}"
                sh 'ls -al'
            }
        }

        stage('Build with Maven') {
            steps {
                echo '=== Build Backend with Maven ==='
                dir('backend') {
                    sh 'mvn clean package -DskipTests'
                    sh 'ls -la target/'
                }
            }
        }

        stage('Compute Image Meta') {
            steps {
                script {
                    def hashcode = sh(script: "date +%s%N | sha256sum | cut -c1-12", returnStdout: true).trim()
                    env.FINAL_IMAGE_TAG = "${IMAGE_TAG}-${hashcode}"
                    env.IMAGE_REGISTRY  = "${IMAGE_REGISTRY_URL}/${IMAGE_REGISTRY_PROJECT}"
                    env.IMAGE_REF       = "${IMAGE_REGISTRY}/${IMAGE_NAME}:${FINAL_IMAGE_TAG}"

                    echo "REG_HOST: ${IMAGE_REGISTRY_URL}"
                    echo "IMAGE_REF: ${IMAGE_REF}"
                }
            }
        }

        stage('Image Build & Push (Kaniko)') {
            steps {
                script {
                    echo "=== Building and Pushing Backend Docker Image with Kaniko ==="

                    // Dockerfile 존재 확인
                    sh 'ls -la backend/Dockerfile || echo "WARNING: Dockerfile not found!"'

                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKER_CREDENTIAL_ID}",
                        usernameVariable: 'REGISTRY_USER',
                        passwordVariable: 'REGISTRY_PASS'
                    )]) {
                        sh """
                            mkdir -p ${WORKSPACE}/.docker
                            cat > ${WORKSPACE}/.docker/config.json <<EOF
{
  "auths": {
    "${IMAGE_REGISTRY_URL}": {
      "auth": "\$(echo -n \${REGISTRY_USER}:\${REGISTRY_PASS} | base64)"
    }
  }
}
EOF

                            docker run --rm \
                              -v ${WORKSPACE}:/workspace \
                              -v ${WORKSPACE}/.docker:/kaniko/.docker \
                              gcr.io/kaniko-project/executor:latest \
                              --dockerfile=backend/Dockerfile \
                              --context=/workspace \
                              --destination=${IMAGE_REF} \
                              --skip-tls-verify \
                              --cache=true
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    set -eux
                    test -f ./k8s/deploy.yaml

                    echo "--- BEFORE ---"
                    grep -n 'image:' ./k8s/deploy.yaml || true

                    sed -Ei "s#(image:[[:space:]]*$IMAGE_REGISTRY/$IMAGE_NAME)[^[:space:]]+#\\1:$FINAL_IMAGE_TAG#" ./k8s/deploy.yaml

                    echo "--- AFTER ---"
                    grep -n 'image:' ./k8s/deploy.yaml || true

                    kubectl apply -n ${K8S_NAMESPACE} -f ./k8s
                    kubectl rollout status -n ${K8S_NAMESPACE} deployment/${IMAGE_NAME}
                '''
            }
        }
    }

    post {
        always {
            cleanWs()
            echo "✅ Backend Pipeline finished!"
        }
    }
}
