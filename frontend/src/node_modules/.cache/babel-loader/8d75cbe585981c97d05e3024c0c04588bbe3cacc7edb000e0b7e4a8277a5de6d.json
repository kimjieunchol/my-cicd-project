{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useChat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const sendMessage = async text => {\n    // 사용자 메시지 추가\n    const userMessage = {\n      id: Date.now(),\n      type: \"user\",\n      text: text,\n      message: text,\n      // message 필드도 추가\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsTyping(true);\n    try {\n      // 백엔드 API 호출\n      const response = await fetch(\"http://localhost:8080/api/chat/query\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: text\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // 봇 응답 추가\n      const botMessage = {\n        id: Date.now() + 1,\n        type: \"bot\",\n        text: data.message,\n        // 백엔드에서 온 message 필드\n        message: data.message,\n        // message 필드도 저장\n        timestamp: new Date(),\n        error: false\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n\n      // 에러 메시지 추가\n      const errorMessage = {\n        id: Date.now() + 1,\n        type: \"bot\",\n        text: \"죄송합니다. 서버와의 연결에 문제가 있습니다. 잠시 후 다시 시도해주세요.\",\n        message: \"죄송합니다. 서버와의 연결에 문제가 있습니다.\",\n        timestamp: new Date(),\n        error: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return {\n    messages,\n    isTyping,\n    sendMessage\n  };\n};\n_s(useChat, \"p6HkwFv81xJjcNbHLYif4DA38Lc=\");\nexport default useChat;","map":{"version":3,"names":["useState","useChat","_s","messages","setMessages","isTyping","setIsTyping","sendMessage","text","userMessage","id","Date","now","type","message","timestamp","prev","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","botMessage","error","console","errorMessage"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useChat = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const sendMessage = async (text) => {\r\n    // 사용자 메시지 추가\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      type: \"user\",\r\n      text: text,\r\n      message: text, // message 필드도 추가\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setIsTyping(true);\r\n\r\n    try {\r\n      // 백엔드 API 호출\r\n      const response = await fetch(\"http://localhost:8080/api/chat/query\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ message: text }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // 봇 응답 추가\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        type: \"bot\",\r\n        text: data.message, // 백엔드에서 온 message 필드\r\n        message: data.message, // message 필드도 저장\r\n        timestamp: new Date(),\r\n        error: false,\r\n      };\r\n\r\n      setMessages((prev) => [...prev, botMessage]);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n\r\n      // 에러 메시지 추가\r\n      const errorMessage = {\r\n        id: Date.now() + 1,\r\n        type: \"bot\",\r\n        text: \"죄송합니다. 서버와의 연결에 문제가 있습니다. 잠시 후 다시 시도해주세요.\",\r\n        message: \"죄송합니다. 서버와의 연결에 문제가 있습니다.\",\r\n        timestamp: new Date(),\r\n        error: true,\r\n      };\r\n\r\n      setMessages((prev) => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    messages,\r\n    isTyping,\r\n    sendMessage,\r\n  };\r\n};\r\n\r\nexport default useChat;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMO,WAAW,GAAG,MAAOC,IAAI,IAAK;IAClC;IACA,MAAMC,WAAW,GAAG;MAClBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdC,IAAI,EAAE,MAAM;MACZL,IAAI,EAAEA,IAAI;MACVM,OAAO,EAAEN,IAAI;MAAE;MACfO,SAAS,EAAE,IAAIJ,IAAI,CAAC;IACtB,CAAC;IAEDP,WAAW,CAAEY,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEP,WAAW,CAAC,CAAC;IAC7CH,WAAW,CAAC,IAAI,CAAC;IAEjB,IAAI;MACF;MACA,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAET,OAAO,EAAEN;QAAK,CAAC;MACxC,CAAC,CAAC;MAEF,IAAI,CAACS,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;;MAElC;MACA,MAAMC,UAAU,GAAG;QACjBnB,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC;QAClBC,IAAI,EAAE,KAAK;QACXL,IAAI,EAAEmB,IAAI,CAACb,OAAO;QAAE;QACpBA,OAAO,EAAEa,IAAI,CAACb,OAAO;QAAE;QACvBC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;QACrBmB,KAAK,EAAE;MACT,CAAC;MAED1B,WAAW,CAAEY,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEa,UAAU,CAAC,CAAC;IAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;;MAE9C;MACA,MAAME,YAAY,GAAG;QACnBtB,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC;QAClBC,IAAI,EAAE,KAAK;QACXL,IAAI,EAAE,2CAA2C;QACjDM,OAAO,EAAE,2BAA2B;QACpCC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;QACrBmB,KAAK,EAAE;MACT,CAAC;MAED1B,WAAW,CAAEY,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEgB,YAAY,CAAC,CAAC;IAChD,CAAC,SAAS;MACR1B,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,OAAO;IACLH,QAAQ;IACRE,QAAQ;IACRE;EACF,CAAC;AACH,CAAC;AAACL,EAAA,CApEID,OAAO;AAsEb,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}