{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nconst API_BASE = \"http://localhost:8080/api\";\nconst useScheduleCalendar = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  // 사용자 정보 가져오기\n  const getUser = () => {\n    const userStr = localStorage.getItem(\"user\");\n    return userStr ? JSON.parse(userStr) : null;\n  };\n\n  // 스케줄 불러오기\n  const loadSchedules = async () => {\n    const user = getUser();\n    if (!user) return;\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE}/schedules/user/${user.id}`);\n      setTasks(response.data);\n    } catch (err) {\n      console.error(\"Failed to load schedules:\", err);\n      setError(\"스케줄을 불러오는데 실패했습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 캘린더용 통합 데이터 불러오기 (스케줄 + 이벤트)\n  const loadCalendarData = async () => {\n    const user = getUser();\n    if (!user) return;\n    try {\n      // 백엔드의 통합 엔드포인트 사용\n      const response = await axios.get(`${API_BASE}/schedules/user/${user.id}/calendar`);\n\n      // 데이터를 캘린더 형식으로 변환\n      const calendarEvents = response.data.map(item => ({\n        id: item.eventType === \"schedule\" ? `schedule-${item.id}` : `event-${item.id}`,\n        date: new Date(item.eventDate),\n        title: item.title,\n        type: item.eventType || \"event\",\n        priority: item.priority,\n        completed: item.completed,\n        time: item.eventTime\n      }));\n      setEvents(calendarEvents);\n    } catch (err) {\n      console.error(\"Failed to load calendar data:\", err);\n    }\n  };\n  useEffect(() => {\n    loadSchedules();\n    loadCalendarData();\n  }, []);\n\n  // 스케줄 추가 (자동으로 캘린더에도 반영)\n  const addTask = async () => {\n    if (!newTask.trim()) return;\n    const user = getUser();\n    if (!user) {\n      setError(\"로그인이 필요합니다.\");\n      return;\n    }\n    try {\n      const response = await axios.post(`${API_BASE}/schedules`, {\n        userId: user.id,\n        title: newTask,\n        priority: \"medium\",\n        dueDate: new Date().toISOString().split(\"T\")[0],\n        description: \"\"\n      });\n      setTasks(prev => [response.data, ...prev]);\n      setNewTask(\"\");\n\n      // 캘린더 데이터 새로고침\n      await loadCalendarData();\n    } catch (err) {\n      console.error(\"Failed to add task:\", err);\n      setError(\"작업 추가에 실패했습니다.\");\n    }\n  };\n\n  // 스케줄 완료 토글\n  const toggleComplete = async id => {\n    try {\n      const response = await axios.put(`${API_BASE}/schedules/${id}/toggle`);\n      setTasks(prev => prev.map(task => task.id === id ? response.data : task));\n\n      // 캘린더 데이터 새로고침\n      await loadCalendarData();\n    } catch (err) {\n      console.error(\"Failed to toggle task:\", err);\n    }\n  };\n\n  // 스케줄 삭제\n  const deleteTask = async id => {\n    try {\n      await axios.delete(`${API_BASE}/schedules/${id}`);\n      setTasks(prev => prev.filter(task => task.id !== id));\n\n      // 캘린더 데이터 새로고침\n      await loadCalendarData();\n    } catch (err) {\n      console.error(\"Failed to delete task:\", err);\n    }\n  };\n\n  // 캘린더 관련 함수들\n  const getDaysInMonth = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const firstDay = new Date(year, month, 1).getDay();\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    return {\n      firstDay,\n      daysInMonth\n    };\n  };\n  const getEventsForDate = day => {\n    const targetDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n    return events.filter(event => event.date.getDate() === targetDate.getDate() && event.date.getMonth() === targetDate.getMonth() && event.date.getFullYear() === targetDate.getFullYear());\n  };\n  const prevMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1));\n  };\n  const nextMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1));\n  };\n  return {\n    // 스케줄 관련\n    tasks,\n    newTask,\n    setNewTask,\n    addTask,\n    toggleComplete,\n    deleteTask,\n    // 캘린더 관련\n    currentDate,\n    events,\n    getDaysInMonth,\n    getEventsForDate,\n    prevMonth,\n    nextMonth,\n    // 공통\n    loading,\n    error,\n    refresh: () => {\n      loadSchedules();\n      loadCalendarData();\n    }\n  };\n};\n_s(useScheduleCalendar, \"MNPxt+TEDte3EIvGJ8iD8fSlstM=\");\nexport default useScheduleCalendar;","map":{"version":3,"names":["useState","useEffect","axios","API_BASE","useScheduleCalendar","_s","tasks","setTasks","events","setEvents","newTask","setNewTask","loading","setLoading","error","setError","currentDate","setCurrentDate","Date","getUser","userStr","localStorage","getItem","JSON","parse","loadSchedules","user","response","get","id","data","err","console","loadCalendarData","calendarEvents","map","item","eventType","date","eventDate","title","type","priority","completed","time","eventTime","addTask","trim","post","userId","dueDate","toISOString","split","description","prev","toggleComplete","put","task","deleteTask","delete","filter","getDaysInMonth","year","getFullYear","month","getMonth","firstDay","getDay","daysInMonth","getDate","getEventsForDate","day","targetDate","event","prevMonth","nextMonth","refresh"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useScheduleCalendar.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst API_BASE = \"http://localhost:8080/api\";\r\n\r\nconst useScheduleCalendar = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [events, setEvents] = useState([]);\r\n  const [newTask, setNewTask] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  // 사용자 정보 가져오기\r\n  const getUser = () => {\r\n    const userStr = localStorage.getItem(\"user\");\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  };\r\n\r\n  // 스케줄 불러오기\r\n  const loadSchedules = async () => {\r\n    const user = getUser();\r\n    if (!user) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.get(`${API_BASE}/schedules/user/${user.id}`);\r\n      setTasks(response.data);\r\n    } catch (err) {\r\n      console.error(\"Failed to load schedules:\", err);\r\n      setError(\"스케줄을 불러오는데 실패했습니다.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 캘린더용 통합 데이터 불러오기 (스케줄 + 이벤트)\r\n  const loadCalendarData = async () => {\r\n    const user = getUser();\r\n    if (!user) return;\r\n\r\n    try {\r\n      // 백엔드의 통합 엔드포인트 사용\r\n      const response = await axios.get(\r\n        `${API_BASE}/schedules/user/${user.id}/calendar`\r\n      );\r\n\r\n      // 데이터를 캘린더 형식으로 변환\r\n      const calendarEvents = response.data.map((item) => ({\r\n        id:\r\n          item.eventType === \"schedule\"\r\n            ? `schedule-${item.id}`\r\n            : `event-${item.id}`,\r\n        date: new Date(item.eventDate),\r\n        title: item.title,\r\n        type: item.eventType || \"event\",\r\n        priority: item.priority,\r\n        completed: item.completed,\r\n        time: item.eventTime,\r\n      }));\r\n\r\n      setEvents(calendarEvents);\r\n    } catch (err) {\r\n      console.error(\"Failed to load calendar data:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadSchedules();\r\n    loadCalendarData();\r\n  }, []);\r\n\r\n  // 스케줄 추가 (자동으로 캘린더에도 반영)\r\n  const addTask = async () => {\r\n    if (!newTask.trim()) return;\r\n\r\n    const user = getUser();\r\n    if (!user) {\r\n      setError(\"로그인이 필요합니다.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(`${API_BASE}/schedules`, {\r\n        userId: user.id,\r\n        title: newTask,\r\n        priority: \"medium\",\r\n        dueDate: new Date().toISOString().split(\"T\")[0],\r\n        description: \"\",\r\n      });\r\n\r\n      setTasks((prev) => [response.data, ...prev]);\r\n      setNewTask(\"\");\r\n\r\n      // 캘린더 데이터 새로고침\r\n      await loadCalendarData();\r\n    } catch (err) {\r\n      console.error(\"Failed to add task:\", err);\r\n      setError(\"작업 추가에 실패했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 스케줄 완료 토글\r\n  const toggleComplete = async (id) => {\r\n    try {\r\n      const response = await axios.put(`${API_BASE}/schedules/${id}/toggle`);\r\n\r\n      setTasks((prev) =>\r\n        prev.map((task) => (task.id === id ? response.data : task))\r\n      );\r\n\r\n      // 캘린더 데이터 새로고침\r\n      await loadCalendarData();\r\n    } catch (err) {\r\n      console.error(\"Failed to toggle task:\", err);\r\n    }\r\n  };\r\n\r\n  // 스케줄 삭제\r\n  const deleteTask = async (id) => {\r\n    try {\r\n      await axios.delete(`${API_BASE}/schedules/${id}`);\r\n\r\n      setTasks((prev) => prev.filter((task) => task.id !== id));\r\n\r\n      // 캘린더 데이터 새로고침\r\n      await loadCalendarData();\r\n    } catch (err) {\r\n      console.error(\"Failed to delete task:\", err);\r\n    }\r\n  };\r\n\r\n  // 캘린더 관련 함수들\r\n  const getDaysInMonth = () => {\r\n    const year = currentDate.getFullYear();\r\n    const month = currentDate.getMonth();\r\n    const firstDay = new Date(year, month, 1).getDay();\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n    return { firstDay, daysInMonth };\r\n  };\r\n\r\n  const getEventsForDate = (day) => {\r\n    const targetDate = new Date(\r\n      currentDate.getFullYear(),\r\n      currentDate.getMonth(),\r\n      day\r\n    );\r\n\r\n    return events.filter(\r\n      (event) =>\r\n        event.date.getDate() === targetDate.getDate() &&\r\n        event.date.getMonth() === targetDate.getMonth() &&\r\n        event.date.getFullYear() === targetDate.getFullYear()\r\n    );\r\n  };\r\n\r\n  const prevMonth = () => {\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() - 1)\r\n    );\r\n  };\r\n\r\n  const nextMonth = () => {\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() + 1)\r\n    );\r\n  };\r\n\r\n  return {\r\n    // 스케줄 관련\r\n    tasks,\r\n    newTask,\r\n    setNewTask,\r\n    addTask,\r\n    toggleComplete,\r\n    deleteTask,\r\n\r\n    // 캘린더 관련\r\n    currentDate,\r\n    events,\r\n    getDaysInMonth,\r\n    getEventsForDate,\r\n    prevMonth,\r\n    nextMonth,\r\n\r\n    // 공통\r\n    loading,\r\n    error,\r\n    refresh: () => {\r\n      loadSchedules();\r\n      loadCalendarData();\r\n    },\r\n  };\r\n};\r\n\r\nexport default useScheduleCalendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}