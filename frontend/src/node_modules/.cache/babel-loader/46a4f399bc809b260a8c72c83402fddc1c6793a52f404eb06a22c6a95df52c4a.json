{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useScheduleCalendar.js\nimport { useState, useEffect } from \"react\";\nimport { getUserSchedules, createSchedule, toggleCompleteSchedule, deleteSchedule, getUserEvents } from \"../services/api\";\nconst useScheduleCalendar = user => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  // ---------------- 1️⃣ 초기 데이터 로드 ----------------\n  const loadSchedules = async () => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      const schedules = await getUserSchedules(user.id);\n      setTasks(schedules);\n      const scheduleEvents = schedules.map(schedule => ({\n        id: `schedule-${schedule.id}`,\n        date: new Date(schedule.dueDate),\n        title: schedule.title,\n        type: \"schedule\",\n        priority: schedule.priority,\n        completed: schedule.completed\n      }));\n      setEvents(prev => {\n        const otherEvents = prev.filter(e => e.type !== \"schedule\");\n        return [...otherEvents, ...scheduleEvents];\n      });\n    } catch (err) {\n      console.error(\"Failed to load schedules:\", err);\n      setError(\"스케줄을 불러오는데 실패했습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadEvents = async () => {\n    if (!user) return;\n    try {\n      const calendarData = await getUserEvents(user.id);\n      const calendarEvents = calendarData.map(event => ({\n        id: `event-${event.id}`,\n        date: new Date(event.eventDate),\n        title: event.title,\n        type: event.eventType || \"event\",\n        time: event.eventTime\n      }));\n      setEvents(prev => {\n        const scheduleEvents = prev.filter(e => e.type === \"schedule\");\n        return [...scheduleEvents, ...calendarEvents];\n      });\n    } catch (err) {\n      console.error(\"Failed to load events:\", err);\n    }\n  };\n  useEffect(() => {\n    loadSchedules();\n    loadEvents();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // ---------------- 2️⃣ 할 일 추가 ----------------\n  const addTask = async () => {\n    if (!newTask.trim() || !user) return;\n    try {\n      const todayStr = new Date().toISOString().split(\"T\")[0];\n      const savedTask = await createSchedule({\n        userId: user.id,\n        title: newTask,\n        priority: \"medium\",\n        dueDate: todayStr,\n        description: \"\"\n      });\n      setTasks(prev => [savedTask, ...prev]);\n      const newEvent = {\n        id: `schedule-${savedTask.id}`,\n        date: new Date(savedTask.dueDate),\n        title: savedTask.title,\n        type: \"schedule\",\n        priority: savedTask.priority,\n        completed: savedTask.completed\n      };\n      setEvents(prev => {\n        const filtered = prev.filter(e => e.id !== newEvent.id);\n        return [...filtered, newEvent];\n      });\n      setNewTask(\"\");\n    } catch (err) {\n      console.error(err);\n      setError(\"작업 추가에 실패했습니다.\");\n    }\n  };\n\n  // ---------------- 3️⃣ 날짜별 이벤트 조회 ----------------\n  const getEventsForDate = day => {\n    const targetDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day).setHours(0, 0, 0, 0);\n    return events.filter(event => {\n      const eventTime = new Date(event.date).setHours(0, 0, 0, 0);\n      return eventTime === targetDate;\n    });\n  };\n\n  // ---------------- 4️⃣ 완료 토글 ----------------\n  const toggleComplete = async id => {\n    try {\n      const updatedTask = await toggleCompleteSchedule(id);\n      setTasks(prev => prev.map(task => task.id === id ? updatedTask : task));\n      setEvents(prev => prev.map(event => event.id === `schedule-${id}` ? {\n        ...event,\n        completed: updatedTask.completed\n      } : event));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // ---------------- 5️⃣ 삭제 ----------------\n  const deleteTaskById = async id => {\n    try {\n      await deleteSchedule(id);\n      setTasks(prev => prev.filter(task => task.id !== id));\n      setEvents(prev => prev.filter(event => event.id !== `schedule-${id}`));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // ---------------- 6️⃣ 캘린더 헬퍼 ----------------\n  const getDaysInMonth = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const firstDay = new Date(year, month, 1).getDay();\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    return {\n      firstDay,\n      daysInMonth\n    };\n  };\n  const prevMonth = () => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1));\n  const nextMonth = () => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1));\n  return {\n    tasks,\n    newTask,\n    setNewTask,\n    addTask,\n    toggleComplete,\n    deleteTask: deleteTaskById,\n    currentDate,\n    events,\n    getDaysInMonth,\n    getEventsForDate,\n    prevMonth,\n    nextMonth,\n    loading,\n    error,\n    refresh: () => {\n      loadSchedules();\n      loadEvents();\n    }\n  };\n};\n_s(useScheduleCalendar, \"MNPxt+TEDte3EIvGJ8iD8fSlstM=\");\nexport default useScheduleCalendar;","map":{"version":3,"names":["useState","useEffect","getUserSchedules","createSchedule","toggleCompleteSchedule","deleteSchedule","getUserEvents","useScheduleCalendar","user","_s","tasks","setTasks","events","setEvents","newTask","setNewTask","loading","setLoading","error","setError","currentDate","setCurrentDate","Date","loadSchedules","schedules","id","scheduleEvents","map","schedule","date","dueDate","title","type","priority","completed","prev","otherEvents","filter","e","err","console","loadEvents","calendarData","calendarEvents","event","eventDate","eventType","time","eventTime","addTask","trim","todayStr","toISOString","split","savedTask","userId","description","newEvent","filtered","getEventsForDate","day","targetDate","getFullYear","getMonth","setHours","toggleComplete","updatedTask","task","deleteTaskById","getDaysInMonth","year","month","firstDay","getDay","daysInMonth","getDate","prevMonth","nextMonth","deleteTask","refresh"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useScheduleCalendar.js"],"sourcesContent":["// src/hooks/useScheduleCalendar.js\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  getUserSchedules,\r\n  createSchedule,\r\n  toggleCompleteSchedule,\r\n  deleteSchedule,\r\n  getUserEvents,\r\n} from \"../services/api\";\r\n\r\nconst useScheduleCalendar = (user) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [events, setEvents] = useState([]);\r\n  const [newTask, setNewTask] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  // ---------------- 1️⃣ 초기 데이터 로드 ----------------\r\n  const loadSchedules = async () => {\r\n    if (!user) return;\r\n    try {\r\n      setLoading(true);\r\n      const schedules = await getUserSchedules(user.id);\r\n      setTasks(schedules);\r\n\r\n      const scheduleEvents = schedules.map((schedule) => ({\r\n        id: `schedule-${schedule.id}`,\r\n        date: new Date(schedule.dueDate),\r\n        title: schedule.title,\r\n        type: \"schedule\",\r\n        priority: schedule.priority,\r\n        completed: schedule.completed,\r\n      }));\r\n\r\n      setEvents((prev) => {\r\n        const otherEvents = prev.filter((e) => e.type !== \"schedule\");\r\n        return [...otherEvents, ...scheduleEvents];\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Failed to load schedules:\", err);\r\n      setError(\"스케줄을 불러오는데 실패했습니다.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadEvents = async () => {\r\n    if (!user) return;\r\n    try {\r\n      const calendarData = await getUserEvents(user.id);\r\n      const calendarEvents = calendarData.map((event) => ({\r\n        id: `event-${event.id}`,\r\n        date: new Date(event.eventDate),\r\n        title: event.title,\r\n        type: event.eventType || \"event\",\r\n        time: event.eventTime,\r\n      }));\r\n\r\n      setEvents((prev) => {\r\n        const scheduleEvents = prev.filter((e) => e.type === \"schedule\");\r\n        return [...scheduleEvents, ...calendarEvents];\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Failed to load events:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadSchedules();\r\n    loadEvents();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [user]);\r\n\r\n  // ---------------- 2️⃣ 할 일 추가 ----------------\r\n  const addTask = async () => {\r\n    if (!newTask.trim() || !user) return;\r\n\r\n    try {\r\n      const todayStr = new Date().toISOString().split(\"T\")[0];\r\n\r\n      const savedTask = await createSchedule({\r\n        userId: user.id,\r\n        title: newTask,\r\n        priority: \"medium\",\r\n        dueDate: todayStr,\r\n        description: \"\",\r\n      });\r\n\r\n      setTasks((prev) => [savedTask, ...prev]);\r\n\r\n      const newEvent = {\r\n        id: `schedule-${savedTask.id}`,\r\n        date: new Date(savedTask.dueDate),\r\n        title: savedTask.title,\r\n        type: \"schedule\",\r\n        priority: savedTask.priority,\r\n        completed: savedTask.completed,\r\n      };\r\n\r\n      setEvents((prev) => {\r\n        const filtered = prev.filter((e) => e.id !== newEvent.id);\r\n        return [...filtered, newEvent];\r\n      });\r\n\r\n      setNewTask(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError(\"작업 추가에 실패했습니다.\");\r\n    }\r\n  };\r\n\r\n  // ---------------- 3️⃣ 날짜별 이벤트 조회 ----------------\r\n  const getEventsForDate = (day) => {\r\n    const targetDate = new Date(\r\n      currentDate.getFullYear(),\r\n      currentDate.getMonth(),\r\n      day\r\n    ).setHours(0, 0, 0, 0);\r\n\r\n    return events.filter((event) => {\r\n      const eventTime = new Date(event.date).setHours(0, 0, 0, 0);\r\n      return eventTime === targetDate;\r\n    });\r\n  };\r\n\r\n  // ---------------- 4️⃣ 완료 토글 ----------------\r\n  const toggleComplete = async (id) => {\r\n    try {\r\n      const updatedTask = await toggleCompleteSchedule(id);\r\n\r\n      setTasks((prev) =>\r\n        prev.map((task) => (task.id === id ? updatedTask : task))\r\n      );\r\n\r\n      setEvents((prev) =>\r\n        prev.map((event) =>\r\n          event.id === `schedule-${id}`\r\n            ? { ...event, completed: updatedTask.completed }\r\n            : event\r\n        )\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // ---------------- 5️⃣ 삭제 ----------------\r\n  const deleteTaskById = async (id) => {\r\n    try {\r\n      await deleteSchedule(id);\r\n      setTasks((prev) => prev.filter((task) => task.id !== id));\r\n      setEvents((prev) =>\r\n        prev.filter((event) => event.id !== `schedule-${id}`)\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // ---------------- 6️⃣ 캘린더 헬퍼 ----------------\r\n  const getDaysInMonth = () => {\r\n    const year = currentDate.getFullYear();\r\n    const month = currentDate.getMonth();\r\n    const firstDay = new Date(year, month, 1).getDay();\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n    return { firstDay, daysInMonth };\r\n  };\r\n\r\n  const prevMonth = () =>\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() - 1)\r\n    );\r\n\r\n  const nextMonth = () =>\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() + 1)\r\n    );\r\n\r\n  return {\r\n    tasks,\r\n    newTask,\r\n    setNewTask,\r\n    addTask,\r\n    toggleComplete,\r\n    deleteTask: deleteTaskById,\r\n    currentDate,\r\n    events,\r\n    getDaysInMonth,\r\n    getEventsForDate,\r\n    prevMonth,\r\n    nextMonth,\r\n    loading,\r\n    error,\r\n    refresh: () => {\r\n      loadSchedules();\r\n      loadEvents();\r\n    },\r\n  };\r\n};\r\n\r\nexport default useScheduleCalendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}