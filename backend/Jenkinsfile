pipeline {
    agent any

    environment {
        GIT_URL                = 'https://github.com/kimjieunchol/my-cicd-project.git'
        GIT_BRANCH             = 'main'
        GIT_ID                 = 'skala-github-id'
        IMAGE_NAME             = 'sk066-backend'
        IMAGE_TAG              = '1.0.0'
        IMAGE_REGISTRY_URL     = 'amdp-registry.skala-ai.com'
        IMAGE_REGISTRY_PROJECT = 'skala25a'
        DOCKER_CREDENTIAL_ID   = 'skala-image-registry-id'
        K8S_NAMESPACE          = 'skala-practice'
        
        BUILDAH_ISOLATION      = 'chroot'
        STORAGE_DRIVER         = 'vfs'
    }

    options {
        disableConcurrentBuilds()
        timestamps()
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo '=== Clone Repository ==='
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        url: "${GIT_URL}",
                        credentialsId: "${GIT_ID}"
                    ]],
                    extensions: [
                        [$class: 'CloneOption', depth: 1, shallow: true, noTags: true],
                        [$class: 'CheckoutOption', timeout: 30]
                    ]
                ])
                sh 'ls -al'
                sh 'ls -al backend/ || echo "backend not found"'
            }
        }

        stage('Prepare Registry Cert') {
            steps {
                echo "✅ Prepare Registry Certificate"
                sh """
                    mkdir -p /tmp/certs
                    echo | openssl s_client -showcerts -servername ${IMAGE_REGISTRY_URL} -connect ${IMAGE_REGISTRY_URL}:443 2>/dev/null | \
                    openssl x509 > /tmp/certs/${IMAGE_REGISTRY_URL}.crt

                    if command -v update-ca-trust >/dev/null 2>&1; then
                        sudo cp /tmp/certs/${IMAGE_REGISTRY_URL}.crt /etc/pki/ca-trust/source/anchors/
                        sudo update-ca-trust
                    elif command -v update-ca-certificates >/dev/null 2>&1; then
                        sudo cp /tmp/certs/${IMAGE_REGISTRY_URL}.crt /usr/local/share/ca-certificates/
                        sudo update-ca-certificates
                    else
                        echo "⚠️ No known CA trust update command found!"
                    fi
                """
            }
        }

        stage('Build with Maven') {
            steps {
                echo '=== Build Backend with Maven ==='
                dir('backend') {
                    sh 'mvn clean package -DskipTests'
                    sh 'ls -la target/'
                }
            }
        }

        stage('Compute Image Meta') {
            steps {
                script {
                    def hashcode = sh(script: "date +%s%N | sha256sum | cut -c1-12", returnStdout: true).trim()
                    env.FINAL_IMAGE_TAG = "${IMAGE_TAG}-${hashcode}"
                    env.IMAGE_REGISTRY  = "${IMAGE_REGISTRY_URL}/${IMAGE_REGISTRY_PROJECT}"
                    env.IMAGE_REF       = "${IMAGE_REGISTRY}/${IMAGE_NAME}:${FINAL_IMAGE_TAG}"

                    echo "=== Image Metadata ==="
                    echo "REG_HOST: ${IMAGE_REGISTRY_URL}"
                    echo "IMAGE_REF: ${IMAGE_REF}"
                    echo "FINAL_IMAGE_TAG: ${FINAL_IMAGE_TAG}"
                }
            }
        }

        stage('Image Build & Push (Buildah)') {
            steps {
                dir('backend') {
                    script {
                        echo "=== Building and Pushing Backend Docker Image with Buildah ==="
                        withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIAL_ID, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PASS')]) {
                            sh """
                                for i in 1 2 3; do
                                    echo "Login attempt \$i..."
                                    if echo "\${REGISTRY_PASS}" | sudo -E buildah login -u "\${REGISTRY_USER}" --password-stdin ${IMAGE_REGISTRY_URL}; then
                                        echo "Login successful!"
                                        break
                                    fi
                                    if [ \$i -eq 3 ]; then
                                        echo "Login failed after 3 attempts"
                                        exit 1
                                    fi
                                    sleep 3
                                done

                                sudo -E buildah bud --format docker -t ${IMAGE_REF} -f Dockerfile .
                                sudo -E buildah push ${IMAGE_REF}
                                sudo -E buildah tag ${IMAGE_REF} ${IMAGE_REGISTRY}/${IMAGE_NAME}:latest
                                sudo -E buildah push ${IMAGE_REGISTRY}/${IMAGE_NAME}:latest
                                sudo -E buildah logout ${IMAGE_REGISTRY_URL} || true
                            """
                        }
                    }
                }
            }
        }

        stage('Update K8s Manifest') {
            steps {
                dir('backend') {
                    sh """
                        set -eux
                        
                        if [ -f ./k8s/sk066-backend-deploy.yaml ]; then
                            K8S_FILE=./k8s/sk066-backend-deploy.yaml
                        elif [ -f ./k8s/deployment.yaml ]; then
                            K8S_FILE=./k8s/deployment.yaml
                        elif [ -f ./k8s/deploy.yaml ]; then
                            K8S_FILE=./k8s/deploy.yaml
                        else
                            echo "ERROR: No deployment file found!"
                            ls -la ./k8s/
                            exit 1
                        fi

                        echo "=== BEFORE UPDATE ==="
                        grep -n 'image:' \${K8S_FILE} || true

                        sed -Ei "s#(image:[[:space:]]*${IMAGE_REGISTRY}/${IMAGE_NAME})[^[:space:]]*#\\1:${FINAL_IMAGE_TAG}#" \${K8S_FILE}

                        echo "=== AFTER UPDATE ==="
                        grep -n 'image:' \${K8S_FILE} || true
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                dir('backend') {
                    script {
                        sh """
                            echo "=== Applying Kubernetes manifests ==="
                            for file in ./k8s/*.yaml; do
                                if [[ "\$(basename \$file)" != *"deploy"* ]]; then
                                    echo "Applying \$file..."
                                    kubectl apply -n ${K8S_NAMESPACE} -f \$file || true
                                fi
                            done

                            echo "=== Replacing deployment with --force ==="
                            kubectl replace -n ${K8S_NAMESPACE} -f ./k8s/sk066-backend-deploy.yaml --force || {
                                echo "Replace failed, trying delete + apply..."
                                kubectl delete deployment ${IMAGE_NAME} -n ${K8S_NAMESPACE} --ignore-not-found=true
                                sleep 2
                                kubectl apply -n ${K8S_NAMESPACE} -f ./k8s/sk066-backend-deploy.yaml
                            }

                            echo "=== Waiting for rollout (5 minutes) ==="
                            kubectl rollout status -n ${K8S_NAMESPACE} deployment/${IMAGE_NAME} --timeout=5m || true

                            echo "=== Checking Pod status ==="
                            kubectl get pods -n ${K8S_NAMESPACE} -l app=${IMAGE_NAME}

                            echo "=== Checking latest Pod events ==="
                            kubectl describe pod -n ${K8S_NAMESPACE} -l app=${IMAGE_NAME} | tail -30 || true
                        """
                        
                        def rolloutStatus = sh(
                            script: "kubectl rollout status -n ${K8S_NAMESPACE} deployment/${IMAGE_NAME} --timeout=3m",
                            returnStatus: true
                        )
                        
                        if (rolloutStatus != 0) {
                            echo "WARNING: Deployment rollout did not complete successfully"
                            sh "kubectl logs -n ${K8S_NAMESPACE} -l app=${IMAGE_NAME} --tail=50 || true"
                            error("Deployment failed - check logs above")
                        } else {
                            echo "✅ Deployment successful!"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                try {
                    sh '''
                        sudo -E buildah rm --all || true
                        sudo -E buildah rmi --prune || true
                    '''
                } catch (Exception e) {
                    echo "Buildah cleanup failed: ${e.message}"
                }
            }
            cleanWs()
        }
        success {
            echo '✅ Backend Pipeline succeeded!'
        }
        failure {
            echo '❌ Backend Pipeline failed!'
        }
    }
}
