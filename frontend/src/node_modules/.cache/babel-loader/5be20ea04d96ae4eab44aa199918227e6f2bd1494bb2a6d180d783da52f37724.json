{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { getAllSchedules } from \"../services/api\";\nconst useSchedule = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState({\n    title: \"\",\n    priority: \"medium\",\n    dueDate: new Date().toISOString().split(\"T\")[0]\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // ✅ 공통 입력 핸들러\n  const handleInputChange = (field, value) => {\n    setNewTask(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // 초기 작업 불러오기\n  useEffect(() => {\n    const loadTasks = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const data = await getAllSchedules();\n        setTasks(data);\n      } catch (err) {\n        console.error(\"Failed to load tasks:\", err);\n        setError(\"작업을 불러오는데 실패했습니다.\");\n\n        // 에러 시 샘플 데이터\n        const sampleData = [{\n          id: 1,\n          title: \"프로젝트 기획서 작성\",\n          priority: \"high\",\n          dueDate: \"2025-09-30\",\n          completed: false\n        }, {\n          id: 2,\n          title: \"회의 준비\",\n          priority: \"medium\",\n          dueDate: \"2025-10-01\",\n          completed: false\n        }, {\n          id: 3,\n          title: \"이메일 확인\",\n          priority: \"low\",\n          dueDate: \"2025-10-02\",\n          completed: true\n        }];\n        setTasks(sampleData);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadTasks();\n  }, []);\n\n  // 작업 추가\n  const addTask = () => {\n    if (!newTask.title.trim()) return;\n    const newTaskObj = {\n      id: Date.now(),\n      title: newTask.title,\n      priority: newTask.priority,\n      dueDate: newTask.dueDate,\n      completed: false\n    };\n    setTasks(prev => [newTaskObj, ...prev]);\n    setNewTask({\n      title: \"\",\n      priority: \"medium\",\n      dueDate: new Date().toISOString().split(\"T\")[0]\n    });\n  };\n\n  // 작업 완료 토글\n  const toggleComplete = id => {\n    setTasks(prev => prev.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n\n  // 작업 삭제\n  const deleteTask = id => {\n    setTasks(prev => prev.filter(task => task.id !== id));\n  };\n\n  // 새로고침\n  const refresh = async () => {\n    setLoading(true);\n    try {\n      const data = await getAllSchedules();\n      setTasks(data);\n      setError(null);\n    } catch (err) {\n      setError(\"새로고침 실패\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    tasks,\n    newTask,\n    setNewTask,\n    handleInputChange,\n    loading,\n    error,\n    addTask,\n    toggleComplete,\n    deleteTask,\n    refresh\n  };\n};\n_s(useSchedule, \"PKryuF6wd4hkuwXG9u+UDJ93ctg=\");\nexport default useSchedule;","map":{"version":3,"names":["useState","useEffect","getAllSchedules","useSchedule","_s","tasks","setTasks","newTask","setNewTask","title","priority","dueDate","Date","toISOString","split","loading","setLoading","error","setError","handleInputChange","field","value","prev","loadTasks","data","err","console","sampleData","id","completed","addTask","trim","newTaskObj","now","toggleComplete","map","task","deleteTask","filter","refresh"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useSchedule.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { getAllSchedules } from \"../services/api\";\r\n\r\nconst useSchedule = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [newTask, setNewTask] = useState({\r\n    title: \"\",\r\n    priority: \"medium\",\r\n    dueDate: new Date().toISOString().split(\"T\")[0],\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // ✅ 공통 입력 핸들러\r\n  const handleInputChange = (field, value) => {\r\n    setNewTask((prev) => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  // 초기 작업 불러오기\r\n  useEffect(() => {\r\n    const loadTasks = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const data = await getAllSchedules();\r\n        setTasks(data);\r\n      } catch (err) {\r\n        console.error(\"Failed to load tasks:\", err);\r\n        setError(\"작업을 불러오는데 실패했습니다.\");\r\n\r\n        // 에러 시 샘플 데이터\r\n        const sampleData = [\r\n          {\r\n            id: 1,\r\n            title: \"프로젝트 기획서 작성\",\r\n            priority: \"high\",\r\n            dueDate: \"2025-09-30\",\r\n            completed: false,\r\n          },\r\n          {\r\n            id: 2,\r\n            title: \"회의 준비\",\r\n            priority: \"medium\",\r\n            dueDate: \"2025-10-01\",\r\n            completed: false,\r\n          },\r\n          {\r\n            id: 3,\r\n            title: \"이메일 확인\",\r\n            priority: \"low\",\r\n            dueDate: \"2025-10-02\",\r\n            completed: true,\r\n          },\r\n        ];\r\n        setTasks(sampleData);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadTasks();\r\n  }, []);\r\n\r\n  // 작업 추가\r\n  const addTask = () => {\r\n    if (!newTask.title.trim()) return;\r\n\r\n    const newTaskObj = {\r\n      id: Date.now(),\r\n      title: newTask.title,\r\n      priority: newTask.priority,\r\n      dueDate: newTask.dueDate,\r\n      completed: false,\r\n    };\r\n\r\n    setTasks((prev) => [newTaskObj, ...prev]);\r\n    setNewTask({\r\n      title: \"\",\r\n      priority: \"medium\",\r\n      dueDate: new Date().toISOString().split(\"T\")[0],\r\n    });\r\n  };\r\n\r\n  // 작업 완료 토글\r\n  const toggleComplete = (id) => {\r\n    setTasks((prev) =>\r\n      prev.map((task) =>\r\n        task.id === id ? { ...task, completed: !task.completed } : task\r\n      )\r\n    );\r\n  };\r\n\r\n  // 작업 삭제\r\n  const deleteTask = (id) => {\r\n    setTasks((prev) => prev.filter((task) => task.id !== id));\r\n  };\r\n\r\n  // 새로고침\r\n  const refresh = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getAllSchedules();\r\n      setTasks(data);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(\"새로고침 실패\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    tasks,\r\n    newTask,\r\n    setNewTask,\r\n    handleInputChange,\r\n    loading,\r\n    error,\r\n    addTask,\r\n    toggleComplete,\r\n    deleteTask,\r\n    refresh,\r\n  };\r\n};\r\n\r\nexport default useSchedule;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}