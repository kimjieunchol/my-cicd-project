pipeline {
    agent any

    environment {
        GIT_URL                = 'https://github.com/kimjieunchol/my-cicd-project.git'
        GIT_BRANCH             = 'main'
        GIT_ID                 = 'skala-github-id'
        
        // ‚úÖ Docker Hub ÏÇ¨Ïö©
        DOCKER_HUB_ID          = 'your-dockerhub-username'  // ‚Üê Î≥ÄÍ≤Ω ÌïÑÏöî
        IMAGE_NAME             = 'sk066-backend'
        IMAGE_TAG              = '1.0.0'
        DOCKER_CREDENTIAL_ID   = 'dockerhub-credentials'  // ‚Üê JenkinsÏóê Docker Hub credentials Ï∂îÍ∞Ä ÌïÑÏöî
        
        K8S_NAMESPACE          = 'skala-practice'

        BUILDAH_ISOLATION      = 'chroot'
        STORAGE_DRIVER         = 'vfs'
    }

    options {
        disableConcurrentBuilds()
        timestamps()
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo '=== Clone Repository ==='
                checkout scm
            }
        }

        stage('Build with Maven') {
            steps {
                echo '=== Build Backend with Maven ==='
                dir('backend') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Compute Image Meta') {
            steps {
                script {
                    def hashcode = sh(script: "date +%s%N | sha256sum | cut -c1-12", returnStdout: true).trim()
                    env.FINAL_IMAGE_TAG = "${IMAGE_TAG}-${hashcode}"
                    env.IMAGE_REF       = "${DOCKER_HUB_ID}/${IMAGE_NAME}:${FINAL_IMAGE_TAG}"

                    echo "=== Image Metadata ==="
                    echo "Docker Hub: ${DOCKER_HUB_ID}"
                    echo "IMAGE_REF: ${IMAGE_REF}"
                    echo "TAG: ${FINAL_IMAGE_TAG}"
                }
            }
        }

        stage('Image Build & Push (Buildah - Docker Hub)') {
            steps {
                dir('backend') {
                    script {
                        withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIAL_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            sh """
                                set -eux

                                # Docker Hub Î°úÍ∑∏Ïù∏
                                echo "üîê Logging in to Docker Hub..."
                                echo "\${DOCKER_PASS}" | sudo -E buildah login -u "\${DOCKER_USER}" --password-stdin docker.io
                                
                                # Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
                                echo "üî® Building image: ${IMAGE_REF}"
                                sudo -E buildah bud --format docker -t ${IMAGE_REF} -f Dockerfile .

                                # Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú
                                echo "üì§ Pushing image: ${IMAGE_REF}"
                                sudo -E buildah push ${IMAGE_REF}

                                # latest ÌÉúÍ∑∏ Ï∂îÍ∞Ä Î∞è Ìë∏Ïãú
                                echo "üè∑Ô∏è  Tagging and pushing latest..."
                                sudo -E buildah tag ${IMAGE_REF} ${DOCKER_HUB_ID}/${IMAGE_NAME}:latest
                                sudo -E buildah push ${DOCKER_HUB_ID}/${IMAGE_NAME}:latest

                                echo "‚úÖ Image build and push completed!"
                                
                                # Î°úÍ∑∏ÏïÑÏõÉ
                                sudo -E buildah logout docker.io || true
                            """
                        }
                    }
                }
            }
        }

        stage('Update K8s Manifest') {
            steps {
                echo '=== Update Kubernetes Manifest ==='
                script {
                    sh """
                        if [ -f k8s/sk066-backend-deploy.yaml ]; then
                            echo "Updating k8s/sk066-backend-deploy.yaml with image: ${IMAGE_REF}"
                            sed -i 's|image: .*/${IMAGE_NAME}:.*|image: ${IMAGE_REF}|g' k8s/sk066-backend-deploy.yaml
                            echo "‚úÖ Deployment manifest updated"
                            grep "image:" k8s/sk066-backend-deploy.yaml
                        else
                            echo "‚ö†Ô∏è  k8s/sk066-backend-deploy.yaml not found in Git repository"
                            echo "Skipping manifest update step"
                        fi
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo '=== Deploy to Kubernetes ==='
                script {
                    sh """
                        if [ -f k8s/sk066-backend-deploy.yaml ]; then
                            echo "üì¶ Deploying from manifest file"
                            kubectl apply -f k8s/sk066-backend-deploy.yaml -n ${K8S_NAMESPACE}
                        else
                            echo "üöÄ Direct deployment using kubectl set image"
                            kubectl set image deployment/sk066-backend \
                                backend=${IMAGE_REF} \
                                -n ${K8S_NAMESPACE}
                        fi
                        
                        echo "‚è≥ Waiting for rollout to complete..."
                        kubectl rollout status deployment/sk066-backend -n ${K8S_NAMESPACE} --timeout=5m
                        echo "‚úÖ Deployment completed successfully"
                    """
                }
            }
        }
    }

    post {
        always {
            sh '''
                sudo -E buildah rm --all || true
                sudo -E buildah rmi --prune || true
            '''
            cleanWs()
        }
        success { echo '‚úÖ Pipeline succeeded!' }
        failure { echo '‚ùå Pipeline failed!' }
    }
}