{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useScheduleCalendar.js\nimport { useState, useEffect } from \"react\";\nimport * as api from \"../services/api\";\nconst useScheduleCalendar = user => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  // 초기 데이터 로드\n  const loadSchedules = async () => {\n    if (!user) return;\n    try {\n      setLoading(true);\n      const schedules = await api.getUserSchedules(user.id);\n      setTasks(schedules);\n      const scheduleEvents = schedules.map(s => ({\n        id: `schedule-${s.id}`,\n        date: new Date(s.dueDate),\n        title: s.title,\n        type: \"schedule\",\n        priority: s.priority,\n        completed: s.completed\n      }));\n      setEvents(prev => [...prev.filter(e => e.type !== \"schedule\"), ...scheduleEvents]);\n    } catch (err) {\n      console.error(err);\n      setError(\"스케줄 불러오기 실패\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadEvents = async () => {\n    if (!user) return;\n    try {\n      const userEvents = await api.getUserEvents(user.id);\n      const calendarEvents = userEvents.map(e => ({\n        id: `event-${e.id}`,\n        date: new Date(e.eventDate),\n        title: e.title,\n        type: e.eventType || \"event\",\n        time: e.eventTime\n      }));\n      setEvents(prev => [...prev.filter(e => e.type === \"schedule\"), ...calendarEvents]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    loadSchedules();\n    loadEvents();\n  }, [user]);\n\n  // 할 일 추가\n  const addTask = async () => {\n    if (!newTask.trim() || !user) return;\n    try {\n      const savedTask = await api.createSchedule({\n        userId: user.id,\n        title: newTask,\n        priority: \"medium\",\n        dueDate: new Date().toISOString().split(\"T\")[0],\n        description: \"\"\n      });\n      setTasks(prev => [savedTask, ...prev]);\n      const newEvent = {\n        id: `schedule-${savedTask.id}`,\n        date: new Date(savedTask.dueDate),\n        title: savedTask.title,\n        type: \"schedule\",\n        priority: savedTask.priority,\n        completed: savedTask.completed\n      };\n      setEvents(prev => [...prev.filter(e => e.id !== newEvent.id), newEvent]);\n      setNewTask(\"\");\n    } catch (err) {\n      console.error(err);\n      setError(\"작업 추가 실패\");\n    }\n  };\n\n  // 완료 토글\n  const toggleComplete = async id => {\n    try {\n      const updated = await api.toggleCompleteSchedule(id);\n      setTasks(prev => prev.map(t => t.id === id ? updated : t));\n      setEvents(prev => prev.map(e => e.id === `schedule-${id}` ? {\n        ...e,\n        completed: updated.completed\n      } : e));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // 삭제\n  const deleteTask = async id => {\n    try {\n      await api.deleteSchedule(id);\n      setTasks(prev => prev.filter(t => t.id !== id));\n      setEvents(prev => prev.filter(e => e.id !== `schedule-${id}`));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // 캘린더 헬퍼\n  const getDaysInMonth = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const firstDay = new Date(year, month, 1).getDay();\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    return {\n      firstDay,\n      daysInMonth\n    };\n  };\n  const getEventsForDate = day => {\n    const target = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n    return events.filter(e => e.date.getDate() === target.getDate() && e.date.getMonth() === target.getMonth() && e.date.getFullYear() === target.getFullYear());\n  };\n  const prevMonth = () => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1));\n  const nextMonth = () => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1));\n  return {\n    tasks,\n    newTask,\n    setNewTask,\n    addTask,\n    toggleComplete,\n    deleteTask,\n    currentDate,\n    events,\n    getDaysInMonth,\n    getEventsForDate,\n    prevMonth,\n    nextMonth,\n    loading,\n    error,\n    refresh: () => {\n      loadSchedules();\n      loadEvents();\n    }\n  };\n};\n_s(useScheduleCalendar, \"MNPxt+TEDte3EIvGJ8iD8fSlstM=\");\nexport default useScheduleCalendar;","map":{"version":3,"names":["useState","useEffect","api","useScheduleCalendar","user","_s","tasks","setTasks","events","setEvents","newTask","setNewTask","loading","setLoading","error","setError","currentDate","setCurrentDate","Date","loadSchedules","schedules","getUserSchedules","id","scheduleEvents","map","s","date","dueDate","title","type","priority","completed","prev","filter","e","err","console","loadEvents","userEvents","getUserEvents","calendarEvents","eventDate","eventType","time","eventTime","addTask","trim","savedTask","createSchedule","userId","toISOString","split","description","newEvent","toggleComplete","updated","toggleCompleteSchedule","t","deleteTask","deleteSchedule","getDaysInMonth","year","getFullYear","month","getMonth","firstDay","getDay","daysInMonth","getDate","getEventsForDate","day","target","prevMonth","nextMonth","refresh"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useScheduleCalendar.js"],"sourcesContent":["// src/hooks/useScheduleCalendar.js\r\nimport { useState, useEffect } from \"react\";\r\nimport * as api from \"../services/api\";\r\n\r\nconst useScheduleCalendar = (user) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [events, setEvents] = useState([]);\r\n  const [newTask, setNewTask] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  // 초기 데이터 로드\r\n  const loadSchedules = async () => {\r\n    if (!user) return;\r\n    try {\r\n      setLoading(true);\r\n      const schedules = await api.getUserSchedules(user.id);\r\n      setTasks(schedules);\r\n\r\n      const scheduleEvents = schedules.map((s) => ({\r\n        id: `schedule-${s.id}`,\r\n        date: new Date(s.dueDate),\r\n        title: s.title,\r\n        type: \"schedule\",\r\n        priority: s.priority,\r\n        completed: s.completed,\r\n      }));\r\n\r\n      setEvents((prev) => [\r\n        ...prev.filter((e) => e.type !== \"schedule\"),\r\n        ...scheduleEvents,\r\n      ]);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError(\"스케줄 불러오기 실패\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadEvents = async () => {\r\n    if (!user) return;\r\n    try {\r\n      const userEvents = await api.getUserEvents(user.id);\r\n      const calendarEvents = userEvents.map((e) => ({\r\n        id: `event-${e.id}`,\r\n        date: new Date(e.eventDate),\r\n        title: e.title,\r\n        type: e.eventType || \"event\",\r\n        time: e.eventTime,\r\n      }));\r\n\r\n      setEvents((prev) => [\r\n        ...prev.filter((e) => e.type === \"schedule\"),\r\n        ...calendarEvents,\r\n      ]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadSchedules();\r\n    loadEvents();\r\n  }, [user]);\r\n\r\n  // 할 일 추가\r\n  const addTask = async () => {\r\n    if (!newTask.trim() || !user) return;\r\n    try {\r\n      const savedTask = await api.createSchedule({\r\n        userId: user.id,\r\n        title: newTask,\r\n        priority: \"medium\",\r\n        dueDate: new Date().toISOString().split(\"T\")[0],\r\n        description: \"\",\r\n      });\r\n      setTasks((prev) => [savedTask, ...prev]);\r\n\r\n      const newEvent = {\r\n        id: `schedule-${savedTask.id}`,\r\n        date: new Date(savedTask.dueDate),\r\n        title: savedTask.title,\r\n        type: \"schedule\",\r\n        priority: savedTask.priority,\r\n        completed: savedTask.completed,\r\n      };\r\n      setEvents((prev) => [\r\n        ...prev.filter((e) => e.id !== newEvent.id),\r\n        newEvent,\r\n      ]);\r\n      setNewTask(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError(\"작업 추가 실패\");\r\n    }\r\n  };\r\n\r\n  // 완료 토글\r\n  const toggleComplete = async (id) => {\r\n    try {\r\n      const updated = await api.toggleCompleteSchedule(id);\r\n      setTasks((prev) => prev.map((t) => (t.id === id ? updated : t)));\r\n      setEvents((prev) =>\r\n        prev.map((e) =>\r\n          e.id === `schedule-${id}` ? { ...e, completed: updated.completed } : e\r\n        )\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // 삭제\r\n  const deleteTask = async (id) => {\r\n    try {\r\n      await api.deleteSchedule(id);\r\n      setTasks((prev) => prev.filter((t) => t.id !== id));\r\n      setEvents((prev) => prev.filter((e) => e.id !== `schedule-${id}`));\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // 캘린더 헬퍼\r\n  const getDaysInMonth = () => {\r\n    const year = currentDate.getFullYear();\r\n    const month = currentDate.getMonth();\r\n    const firstDay = new Date(year, month, 1).getDay();\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n    return { firstDay, daysInMonth };\r\n  };\r\n\r\n  const getEventsForDate = (day) => {\r\n    const target = new Date(\r\n      currentDate.getFullYear(),\r\n      currentDate.getMonth(),\r\n      day\r\n    );\r\n    return events.filter(\r\n      (e) =>\r\n        e.date.getDate() === target.getDate() &&\r\n        e.date.getMonth() === target.getMonth() &&\r\n        e.date.getFullYear() === target.getFullYear()\r\n    );\r\n  };\r\n\r\n  const prevMonth = () =>\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() - 1)\r\n    );\r\n  const nextMonth = () =>\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() + 1)\r\n    );\r\n\r\n  return {\r\n    tasks,\r\n    newTask,\r\n    setNewTask,\r\n    addTask,\r\n    toggleComplete,\r\n    deleteTask,\r\n    currentDate,\r\n    events,\r\n    getDaysInMonth,\r\n    getEventsForDate,\r\n    prevMonth,\r\n    nextMonth,\r\n    loading,\r\n    error,\r\n    refresh: () => {\r\n      loadSchedules();\r\n      loadEvents();\r\n    },\r\n  };\r\n};\r\n\r\nexport default useScheduleCalendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}