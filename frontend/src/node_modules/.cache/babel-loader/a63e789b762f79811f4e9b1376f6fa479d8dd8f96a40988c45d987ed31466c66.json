{"ast":null,"code":"// 공지사항 데이터를 챗봇 응답 형식으로 포맷팅\nexport const formatNotices = notices => {\n  if (!notices || notices.length === 0) {\n    return \"죄송합니다. 해당하는 공지사항을 찾을 수 없습니다. 😢\";\n  }\n\n  // 공지사항이 배열이 아닌 경우 (단일 객체)\n  if (!Array.isArray(notices)) {\n    return formatSingleNotice(notices);\n  }\n\n  // 공지사항이 배열인 경우\n  if (notices.length === 1) {\n    return formatSingleNotice(notices[0]);\n  }\n\n  // 여러 개의 공지사항\n  let response = `총 ${notices.length}개의 공지사항을 찾았습니다:\\n\\n`;\n  notices.forEach((notice, index) => {\n    response += `${index + 1}. ${notice.content || notice.title}\\n`;\n    if (notice.department) {\n      response += `   📌 부서: ${notice.department}\\n`;\n    }\n    if (notice.date) {\n      response += `   📅 날짜: ${notice.date}\\n`;\n    }\n    if (notice.priority) {\n      const priorityEmoji = getPriorityEmoji(notice.priority);\n      response += `   ${priorityEmoji} 우선순위: ${notice.priority}\\n`;\n    }\n    response += `\\n`;\n  });\n  return response.trim();\n};\n\n// 단일 공지사항 포맷팅\nconst formatSingleNotice = notice => {\n  let response = `📢 공지사항을 찾았습니다!\\n\\n`;\n  response += `제목: ${notice.content || notice.title}\\n`;\n  if (notice.department) {\n    response += `부서: ${notice.department}\\n`;\n  }\n  if (notice.date) {\n    response += `날짜: ${notice.date}\\n`;\n  }\n  if (notice.priority) {\n    const priorityEmoji = getPriorityEmoji(notice.priority);\n    response += `${priorityEmoji} 우선순위: ${notice.priority}\\n`;\n  }\n  if (notice.description) {\n    response += `\\n${notice.description}`;\n  }\n  return response;\n};\n\n// 우선순위별 이모지 반환\nconst getPriorityEmoji = priority => {\n  switch (priority === null || priority === void 0 ? void 0 : priority.toLowerCase()) {\n    case \"high\":\n      return \"🔴\";\n    case \"medium\":\n      return \"🟡\";\n    case \"low\":\n      return \"🟢\";\n    default:\n      return \"⚪\";\n  }\n};\n\n// 날짜 포맷팅\nexport const formatDate = date => {\n  if (!date) return \"\";\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, \"0\");\n  const day = String(d.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};\n\n// 시간 포맷팅\nexport const formatTime = date => {\n  if (!date) return \"\";\n  const d = new Date(date);\n  const hours = String(d.getHours()).padStart(2, \"0\");\n  const minutes = String(d.getMinutes()).padStart(2, \"0\");\n  return `${hours}:${minutes}`;\n};\n\n// 날짜와 시간 모두 포맷팅\nexport const formatDateTime = date => {\n  if (!date) return \"\";\n  return `${formatDate(date)} ${formatTime(date)}`;\n};","map":{"version":3,"names":["formatNotices","notices","length","Array","isArray","formatSingleNotice","response","forEach","notice","index","content","title","department","date","priority","priorityEmoji","getPriorityEmoji","trim","description","toLowerCase","formatDate","d","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","formatTime","hours","getHours","minutes","getMinutes","formatDateTime"],"sources":["C:/workspace/a_hub_project/frontend/src/utils/formatters.js"],"sourcesContent":["// 공지사항 데이터를 챗봇 응답 형식으로 포맷팅\r\nexport const formatNotices = (notices) => {\r\n  if (!notices || notices.length === 0) {\r\n    return \"죄송합니다. 해당하는 공지사항을 찾을 수 없습니다. 😢\";\r\n  }\r\n\r\n  // 공지사항이 배열이 아닌 경우 (단일 객체)\r\n  if (!Array.isArray(notices)) {\r\n    return formatSingleNotice(notices);\r\n  }\r\n\r\n  // 공지사항이 배열인 경우\r\n  if (notices.length === 1) {\r\n    return formatSingleNotice(notices[0]);\r\n  }\r\n\r\n  // 여러 개의 공지사항\r\n  let response = `총 ${notices.length}개의 공지사항을 찾았습니다:\\n\\n`;\r\n\r\n  notices.forEach((notice, index) => {\r\n    response += `${index + 1}. ${notice.content || notice.title}\\n`;\r\n    if (notice.department) {\r\n      response += `   📌 부서: ${notice.department}\\n`;\r\n    }\r\n    if (notice.date) {\r\n      response += `   📅 날짜: ${notice.date}\\n`;\r\n    }\r\n    if (notice.priority) {\r\n      const priorityEmoji = getPriorityEmoji(notice.priority);\r\n      response += `   ${priorityEmoji} 우선순위: ${notice.priority}\\n`;\r\n    }\r\n    response += `\\n`;\r\n  });\r\n\r\n  return response.trim();\r\n};\r\n\r\n// 단일 공지사항 포맷팅\r\nconst formatSingleNotice = (notice) => {\r\n  let response = `📢 공지사항을 찾았습니다!\\n\\n`;\r\n  response += `제목: ${notice.content || notice.title}\\n`;\r\n\r\n  if (notice.department) {\r\n    response += `부서: ${notice.department}\\n`;\r\n  }\r\n  if (notice.date) {\r\n    response += `날짜: ${notice.date}\\n`;\r\n  }\r\n  if (notice.priority) {\r\n    const priorityEmoji = getPriorityEmoji(notice.priority);\r\n    response += `${priorityEmoji} 우선순위: ${notice.priority}\\n`;\r\n  }\r\n  if (notice.description) {\r\n    response += `\\n${notice.description}`;\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\n// 우선순위별 이모지 반환\r\nconst getPriorityEmoji = (priority) => {\r\n  switch (priority?.toLowerCase()) {\r\n    case \"high\":\r\n      return \"🔴\";\r\n    case \"medium\":\r\n      return \"🟡\";\r\n    case \"low\":\r\n      return \"🟢\";\r\n    default:\r\n      return \"⚪\";\r\n  }\r\n};\r\n\r\n// 날짜 포맷팅\r\nexport const formatDate = (date) => {\r\n  if (!date) return \"\";\r\n\r\n  const d = new Date(date);\r\n  const year = d.getFullYear();\r\n  const month = String(d.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(d.getDate()).padStart(2, \"0\");\r\n\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\n// 시간 포맷팅\r\nexport const formatTime = (date) => {\r\n  if (!date) return \"\";\r\n\r\n  const d = new Date(date);\r\n  const hours = String(d.getHours()).padStart(2, \"0\");\r\n  const minutes = String(d.getMinutes()).padStart(2, \"0\");\r\n\r\n  return `${hours}:${minutes}`;\r\n};\r\n\r\n// 날짜와 시간 모두 포맷팅\r\nexport const formatDateTime = (date) => {\r\n  if (!date) return \"\";\r\n\r\n  return `${formatDate(date)} ${formatTime(date)}`;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}