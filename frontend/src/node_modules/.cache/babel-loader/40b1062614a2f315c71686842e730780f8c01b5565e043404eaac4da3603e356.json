{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef, useCallback } from \"react\";\nimport { sendChatMessage } from \"../services/api\";\nimport { formatNotices } from \"../utils/formatters\";\nconst useChat = () => {\n  _s();\n  // 초기 메시지\n  const [messages, setMessages] = useState([{\n    id: 1,\n    type: \"bot\",\n    text: \"안녕하세요! A_hub 공지 챗봇입니다. 궁금한 공지사항을 물어보세요! ✨\",\n    timestamp: new Date()\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const messageIdRef = useRef(2);\n\n  // 메시지 추가 함수\n  const addMessage = useCallback((type, text, error = false) => {\n    const newMessage = {\n      id: messageIdRef.current++,\n      type,\n      text,\n      timestamp: new Date(),\n      error\n    };\n    setMessages(prev => [...prev, newMessage]);\n  }, []);\n\n  // 메시지 전송 함수\n  const sendMessage = useCallback(async input => {\n    if (!input.trim()) return;\n\n    // 사용자 메시지 추가\n    addMessage(\"user\", input);\n    setIsTyping(true);\n    try {\n      // API 호출\n      const notices = await sendChatMessage(input);\n\n      // 공지사항 포맷팅\n      const botResponse = formatNotices(notices);\n\n      // 봇 응답 추가\n      addMessage(\"bot\", botResponse);\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n      // 에러 메시지 추가\n      addMessage(\"bot\", \"메시지 전송 중 오류가 발생했습니다. 서버 연결을 확인해주세요.\", true);\n    } finally {\n      setIsTyping(false);\n    }\n  }, [addMessage]);\n  return {\n    messages,\n    isTyping,\n    sendMessage,\n    addMessage\n  };\n};\n_s(useChat, \"Dh1cFtMpnCGZIhNV43wH9ZVCoHY=\");\nexport default useChat;","map":{"version":3,"names":["useState","useRef","useCallback","sendChatMessage","formatNotices","useChat","_s","messages","setMessages","id","type","text","timestamp","Date","isTyping","setIsTyping","messageIdRef","addMessage","error","newMessage","current","prev","sendMessage","input","trim","notices","botResponse","console"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useRef, useCallback } from \"react\";\r\nimport { sendChatMessage } from \"../services/api\";\r\nimport { formatNotices } from \"../utils/formatters\";\r\n\r\nconst useChat = () => {\r\n  // 초기 메시지\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      id: 1,\r\n      type: \"bot\",\r\n      text: \"안녕하세요! A_hub 공지 챗봇입니다. 궁금한 공지사항을 물어보세요! ✨\",\r\n      timestamp: new Date(),\r\n    },\r\n  ]);\r\n\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const messageIdRef = useRef(2);\r\n\r\n  // 메시지 추가 함수\r\n  const addMessage = useCallback((type, text, error = false) => {\r\n    const newMessage = {\r\n      id: messageIdRef.current++,\r\n      type,\r\n      text,\r\n      timestamp: new Date(),\r\n      error,\r\n    };\r\n    setMessages((prev) => [...prev, newMessage]);\r\n  }, []);\r\n\r\n  // 메시지 전송 함수\r\n  const sendMessage = useCallback(\r\n    async (input) => {\r\n      if (!input.trim()) return;\r\n\r\n      // 사용자 메시지 추가\r\n      addMessage(\"user\", input);\r\n      setIsTyping(true);\r\n\r\n      try {\r\n        // API 호출\r\n        const notices = await sendChatMessage(input);\r\n\r\n        // 공지사항 포맷팅\r\n        const botResponse = formatNotices(notices);\r\n\r\n        // 봇 응답 추가\r\n        addMessage(\"bot\", botResponse);\r\n      } catch (error) {\r\n        console.error(\"Failed to send message:\", error);\r\n        // 에러 메시지 추가\r\n        addMessage(\r\n          \"bot\",\r\n          \"메시지 전송 중 오류가 발생했습니다. 서버 연결을 확인해주세요.\",\r\n          true\r\n        );\r\n      } finally {\r\n        setIsTyping(false);\r\n      }\r\n    },\r\n    [addMessage]\r\n  );\r\n\r\n  return {\r\n    messages,\r\n    isTyping,\r\n    sendMessage,\r\n    addMessage,\r\n  };\r\n};\r\n\r\nexport default useChat;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACrD,SAASC,eAAe,QAAQ,iBAAiB;AACjD,SAASC,aAAa,QAAQ,qBAAqB;AAEnD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,CACvC;IACES,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE,2CAA2C;IACjDC,SAAS,EAAE,IAAIC,IAAI,CAAC;EACtB,CAAC,CACF,CAAC;EAEF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAMgB,YAAY,GAAGf,MAAM,CAAC,CAAC,CAAC;;EAE9B;EACA,MAAMgB,UAAU,GAAGf,WAAW,CAAC,CAACQ,IAAI,EAAEC,IAAI,EAAEO,KAAK,GAAG,KAAK,KAAK;IAC5D,MAAMC,UAAU,GAAG;MACjBV,EAAE,EAAEO,YAAY,CAACI,OAAO,EAAE;MAC1BV,IAAI;MACJC,IAAI;MACJC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrBK;IACF,CAAC;IACDV,WAAW,CAAEa,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEF,UAAU,CAAC,CAAC;EAC9C,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,WAAW,GAAGpB,WAAW,CAC7B,MAAOqB,KAAK,IAAK;IACf,IAAI,CAACA,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE;;IAEnB;IACAP,UAAU,CAAC,MAAM,EAAEM,KAAK,CAAC;IACzBR,WAAW,CAAC,IAAI,CAAC;IAEjB,IAAI;MACF;MACA,MAAMU,OAAO,GAAG,MAAMtB,eAAe,CAACoB,KAAK,CAAC;;MAE5C;MACA,MAAMG,WAAW,GAAGtB,aAAa,CAACqB,OAAO,CAAC;;MAE1C;MACAR,UAAU,CAAC,KAAK,EAAES,WAAW,CAAC;IAChC,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C;MACAD,UAAU,CACR,KAAK,EACL,qCAAqC,EACrC,IACF,CAAC;IACH,CAAC,SAAS;MACRF,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC,EACD,CAACE,UAAU,CACb,CAAC;EAED,OAAO;IACLV,QAAQ;IACRO,QAAQ;IACRQ,WAAW;IACXL;EACF,CAAC;AACH,CAAC;AAACX,EAAA,CAjEID,OAAO;AAmEb,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}