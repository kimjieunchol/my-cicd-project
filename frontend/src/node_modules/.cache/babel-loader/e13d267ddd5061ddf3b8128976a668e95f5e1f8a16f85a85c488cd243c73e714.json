{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useCalendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [events, setEvents] = useState([{\n    id: 1,\n    date: new Date(2025, 8, 30),\n    title: \"팀 미팅\",\n    type: \"meeting\"\n  }, {\n    id: 2,\n    date: new Date(2025, 9, 5),\n    title: \"프로젝트 마감\",\n    type: \"deadline\"\n  }, {\n    id: 3,\n    date: new Date(2025, 9, 15),\n    title: \"월례회의\",\n    type: \"meeting\"\n  }]);\n\n  // 해당 월의 첫 날과 총 일수 계산\n  const getDaysInMonth = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n\n    // 첫 날의 요일 (0: 일요일, 6: 토요일)\n    const firstDay = new Date(year, month, 1).getDay();\n\n    // 해당 월의 총 일수\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    return {\n      firstDay,\n      daysInMonth\n    };\n  };\n\n  // 특정 날짜의 이벤트 가져오기\n  const getEventsForDate = day => {\n    const targetDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n    return events.filter(event => event.date.getDate() === targetDate.getDate() && event.date.getMonth() === targetDate.getMonth() && event.date.getFullYear() === targetDate.getFullYear());\n  };\n\n  // 이전 달로 이동\n  const prevMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1));\n  };\n\n  // 다음 달로 이동\n  const nextMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1));\n  };\n\n  // 이벤트 추가\n  const addEvent = event => {\n    setEvents(prev => [...prev, {\n      ...event,\n      id: Date.now()\n    }]);\n  };\n\n  // 이벤트 삭제\n  const deleteEvent = id => {\n    setEvents(prev => prev.filter(e => e.id !== id));\n  };\n  return {\n    currentDate,\n    events,\n    getDaysInMonth,\n    getEventsForDate,\n    prevMonth,\n    nextMonth,\n    addEvent,\n    deleteEvent\n  };\n};\n_s(useCalendar, \"6Y0HYAYy46JRDvkS2e8Pe37ckNg=\");\nexport default useCalendar;","map":{"version":3,"names":["useState","useCalendar","_s","currentDate","setCurrentDate","Date","events","setEvents","id","date","title","type","getDaysInMonth","year","getFullYear","month","getMonth","firstDay","getDay","daysInMonth","getDate","getEventsForDate","day","targetDate","filter","event","prevMonth","nextMonth","addEvent","prev","now","deleteEvent","e"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useCalendar.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useCalendar = () => {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [events, setEvents] = useState([\r\n    {\r\n      id: 1,\r\n      date: new Date(2025, 8, 30),\r\n      title: \"팀 미팅\",\r\n      type: \"meeting\",\r\n    },\r\n    {\r\n      id: 2,\r\n      date: new Date(2025, 9, 5),\r\n      title: \"프로젝트 마감\",\r\n      type: \"deadline\",\r\n    },\r\n    {\r\n      id: 3,\r\n      date: new Date(2025, 9, 15),\r\n      title: \"월례회의\",\r\n      type: \"meeting\",\r\n    },\r\n  ]);\r\n\r\n  // 해당 월의 첫 날과 총 일수 계산\r\n  const getDaysInMonth = () => {\r\n    const year = currentDate.getFullYear();\r\n    const month = currentDate.getMonth();\r\n\r\n    // 첫 날의 요일 (0: 일요일, 6: 토요일)\r\n    const firstDay = new Date(year, month, 1).getDay();\r\n\r\n    // 해당 월의 총 일수\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n\r\n    return { firstDay, daysInMonth };\r\n  };\r\n\r\n  // 특정 날짜의 이벤트 가져오기\r\n  const getEventsForDate = (day) => {\r\n    const targetDate = new Date(\r\n      currentDate.getFullYear(),\r\n      currentDate.getMonth(),\r\n      day\r\n    );\r\n\r\n    return events.filter(\r\n      (event) =>\r\n        event.date.getDate() === targetDate.getDate() &&\r\n        event.date.getMonth() === targetDate.getMonth() &&\r\n        event.date.getFullYear() === targetDate.getFullYear()\r\n    );\r\n  };\r\n\r\n  // 이전 달로 이동\r\n  const prevMonth = () => {\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() - 1)\r\n    );\r\n  };\r\n\r\n  // 다음 달로 이동\r\n  const nextMonth = () => {\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() + 1)\r\n    );\r\n  };\r\n\r\n  // 이벤트 추가\r\n  const addEvent = (event) => {\r\n    setEvents((prev) => [...prev, { ...event, id: Date.now() }]);\r\n  };\r\n\r\n  // 이벤트 삭제\r\n  const deleteEvent = (id) => {\r\n    setEvents((prev) => prev.filter((e) => e.id !== id));\r\n  };\r\n\r\n  return {\r\n    currentDate,\r\n    events,\r\n    getDaysInMonth,\r\n    getEventsForDate,\r\n    prevMonth,\r\n    nextMonth,\r\n    addEvent,\r\n    deleteEvent,\r\n  };\r\n};\r\n\r\nexport default useCalendar;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAAC,IAAIK,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,CACnC;IACEQ,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,IAAIJ,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;IAC3BK,KAAK,EAAE,MAAM;IACbC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,IAAIJ,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;IAC1BK,KAAK,EAAE,SAAS;IAChBC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,IAAIJ,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;IAC3BK,KAAK,EAAE,MAAM;IACbC,IAAI,EAAE;EACR,CAAC,CACF,CAAC;;EAEF;EACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,IAAI,GAAGV,WAAW,CAACW,WAAW,CAAC,CAAC;IACtC,MAAMC,KAAK,GAAGZ,WAAW,CAACa,QAAQ,CAAC,CAAC;;IAEpC;IACA,MAAMC,QAAQ,GAAG,IAAIZ,IAAI,CAACQ,IAAI,EAAEE,KAAK,EAAE,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC;;IAElD;IACA,MAAMC,WAAW,GAAG,IAAId,IAAI,CAACQ,IAAI,EAAEE,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC;IAE1D,OAAO;MAAEH,QAAQ;MAAEE;IAAY,CAAC;EAClC,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAIC,GAAG,IAAK;IAChC,MAAMC,UAAU,GAAG,IAAIlB,IAAI,CACzBF,WAAW,CAACW,WAAW,CAAC,CAAC,EACzBX,WAAW,CAACa,QAAQ,CAAC,CAAC,EACtBM,GACF,CAAC;IAED,OAAOhB,MAAM,CAACkB,MAAM,CACjBC,KAAK,IACJA,KAAK,CAAChB,IAAI,CAACW,OAAO,CAAC,CAAC,KAAKG,UAAU,CAACH,OAAO,CAAC,CAAC,IAC7CK,KAAK,CAAChB,IAAI,CAACO,QAAQ,CAAC,CAAC,KAAKO,UAAU,CAACP,QAAQ,CAAC,CAAC,IAC/CS,KAAK,CAAChB,IAAI,CAACK,WAAW,CAAC,CAAC,KAAKS,UAAU,CAACT,WAAW,CAAC,CACxD,CAAC;EACH,CAAC;;EAED;EACA,MAAMY,SAAS,GAAGA,CAAA,KAAM;IACtBtB,cAAc,CACZ,IAAIC,IAAI,CAACF,WAAW,CAACW,WAAW,CAAC,CAAC,EAAEX,WAAW,CAACa,QAAQ,CAAC,CAAC,GAAG,CAAC,CAChE,CAAC;EACH,CAAC;;EAED;EACA,MAAMW,SAAS,GAAGA,CAAA,KAAM;IACtBvB,cAAc,CACZ,IAAIC,IAAI,CAACF,WAAW,CAACW,WAAW,CAAC,CAAC,EAAEX,WAAW,CAACa,QAAQ,CAAC,CAAC,GAAG,CAAC,CAChE,CAAC;EACH,CAAC;;EAED;EACA,MAAMY,QAAQ,GAAIH,KAAK,IAAK;IAC1BlB,SAAS,CAAEsB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;MAAE,GAAGJ,KAAK;MAAEjB,EAAE,EAAEH,IAAI,CAACyB,GAAG,CAAC;IAAE,CAAC,CAAC,CAAC;EAC9D,CAAC;;EAED;EACA,MAAMC,WAAW,GAAIvB,EAAE,IAAK;IAC1BD,SAAS,CAAEsB,IAAI,IAAKA,IAAI,CAACL,MAAM,CAAEQ,CAAC,IAAKA,CAAC,CAACxB,EAAE,KAAKA,EAAE,CAAC,CAAC;EACtD,CAAC;EAED,OAAO;IACLL,WAAW;IACXG,MAAM;IACNM,cAAc;IACdS,gBAAgB;IAChBK,SAAS;IACTC,SAAS;IACTC,QAAQ;IACRG;EACF,CAAC;AACH,CAAC;AAAC7B,EAAA,CAvFID,WAAW;AAyFjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}