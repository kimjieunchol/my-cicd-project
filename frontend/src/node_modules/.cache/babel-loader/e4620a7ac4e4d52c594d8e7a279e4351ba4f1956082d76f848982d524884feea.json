{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { getAllNotices, searchNotice } from \"../services/api\";\nconst useNotices = () => {\n  _s();\n  const [notices, setNotices] = useState([]);\n  const [allNotices, setAllNotices] = useState([]); // 전체 데이터 보관\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 초기 공지사항 불러오기\n  useEffect(() => {\n    const loadNotices = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const data = await getAllNotices();\n\n        // 우선순위가 없는 경우 추가\n        const noticesWithPriority = data.map((notice, index) => ({\n          ...notice,\n          priority: notice.priority || (index % 3 === 0 ? \"high\" : index % 3 === 1 ? \"medium\" : \"low\"),\n          // date 필드가 없으면 추가\n          date: notice.date || notice.postDate || notice.registerDate || new Date().toISOString().split(\"T\")[0]\n        }));\n        setAllNotices(noticesWithPriority);\n        setNotices(noticesWithPriority);\n      } catch (err) {\n        console.error(\"Failed to load notices:\", err);\n        setError(\"공지사항을 불러오는데 실패했습니다.\");\n\n        // 에러 시 샘플 데이터\n        const sampleData = [{\n          id: 1,\n          seq: \"2024-001\",\n          department: \"개발팀\",\n          content: \"시스템 업데이트 안내\",\n          date: \"2024-03-15\",\n          priority: \"high\"\n        }, {\n          id: 2,\n          seq: \"2024-002\",\n          department: \"인사팀\",\n          content: \"신입사원 환영회 개최\",\n          date: \"2024-03-14\",\n          priority: \"medium\"\n        }, {\n          id: 3,\n          seq: \"2024-003\",\n          department: \"총무팀\",\n          content: \"사무용품 신청 안내\",\n          date: \"2024-03-13\",\n          priority: \"low\"\n        }];\n        setAllNotices(sampleData);\n        setNotices(sampleData);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadNotices();\n  }, []);\n\n  // 검색어가 변경될 때 필터링 (로컬 필터링)\n  useEffect(() => {\n    if (!searchTerm.trim()) {\n      setNotices(allNotices);\n      return;\n    }\n\n    // 로컬에서 필터링\n    const filtered = allNotices.filter(notice => {\n      var _notice$content, _notice$department, _notice$seq;\n      return ((_notice$content = notice.content) === null || _notice$content === void 0 ? void 0 : _notice$content.toLowerCase().includes(searchTerm.toLowerCase())) || ((_notice$department = notice.department) === null || _notice$department === void 0 ? void 0 : _notice$department.toLowerCase().includes(searchTerm.toLowerCase())) || ((_notice$seq = notice.seq) === null || _notice$seq === void 0 ? void 0 : _notice$seq.toLowerCase().includes(searchTerm.toLowerCase()));\n    });\n    setNotices(filtered);\n  }, [searchTerm, allNotices]);\n\n  // 서버에서 검색 (필요한 경우)\n  const searchFromServer = async query => {\n    if (!query.trim()) {\n      setNotices(allNotices);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await searchNotice(query);\n      const noticesWithPriority = data.map((notice, index) => ({\n        ...notice,\n        priority: notice.priority || (index % 3 === 0 ? \"high\" : index % 3 === 1 ? \"medium\" : \"low\"),\n        date: notice.date || notice.postDate || notice.registerDate || new Date().toISOString().split(\"T\")[0]\n      }));\n      setNotices(noticesWithPriority);\n    } catch (err) {\n      console.error(\"Failed to search notices:\", err);\n      setError(\"검색 중 오류가 발생했습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 공지사항 추가 (로컬)\n  const addNotice = notice => {\n    const newNotice = {\n      ...notice,\n      id: Date.now(),\n      date: new Date().toISOString().split(\"T\")[0]\n    };\n    setAllNotices(prev => [newNotice, ...prev]);\n    setNotices(prev => [newNotice, ...prev]);\n  };\n\n  // 공지사항 삭제 (로컬)\n  const deleteNotice = id => {\n    setAllNotices(prev => prev.filter(n => n.id !== id));\n    setNotices(prev => prev.filter(n => n.id !== id));\n  };\n\n  // 새로고침\n  const refresh = async () => {\n    setLoading(true);\n    try {\n      const data = await getAllNotices();\n      const noticesWithPriority = data.map((notice, index) => ({\n        ...notice,\n        priority: notice.priority || (index % 3 === 0 ? \"high\" : index % 3 === 1 ? \"medium\" : \"low\"),\n        date: notice.date || notice.postDate || notice.registerDate || new Date().toISOString().split(\"T\")[0]\n      }));\n      setAllNotices(noticesWithPriority);\n      setNotices(noticesWithPriority);\n      setError(null);\n    } catch (err) {\n      setError(\"새로고침 실패\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    notices,\n    searchTerm,\n    setSearchTerm,\n    loading,\n    error,\n    addNotice,\n    deleteNotice,\n    searchFromServer,\n    refresh\n  };\n};\n_s(useNotices, \"OnJ/AwtoHAxC2KecUl7ghzvFUoA=\");\nexport default useNotices;","map":{"version":3,"names":["useState","useEffect","getAllNotices","searchNotice","useNotices","_s","notices","setNotices","allNotices","setAllNotices","searchTerm","setSearchTerm","loading","setLoading","error","setError","loadNotices","data","noticesWithPriority","map","notice","index","priority","date","postDate","registerDate","Date","toISOString","split","err","console","sampleData","id","seq","department","content","trim","filtered","filter","_notice$content","_notice$department","_notice$seq","toLowerCase","includes","searchFromServer","query","addNotice","newNotice","now","prev","deleteNotice","n","refresh"],"sources":["C:/workspace/a_hub_project/frontend/src/hooks/useNotices.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { getAllNotices, searchNotice } from \"../services/api\";\r\n\r\nconst useNotices = () => {\r\n  const [notices, setNotices] = useState([]);\r\n  const [allNotices, setAllNotices] = useState([]); // 전체 데이터 보관\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 초기 공지사항 불러오기\r\n  useEffect(() => {\r\n    const loadNotices = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const data = await getAllNotices();\r\n\r\n        // 우선순위가 없는 경우 추가\r\n        const noticesWithPriority = data.map((notice, index) => ({\r\n          ...notice,\r\n          priority:\r\n            notice.priority ||\r\n            (index % 3 === 0 ? \"high\" : index % 3 === 1 ? \"medium\" : \"low\"),\r\n          // date 필드가 없으면 추가\r\n          date:\r\n            notice.date ||\r\n            notice.postDate ||\r\n            notice.registerDate ||\r\n            new Date().toISOString().split(\"T\")[0],\r\n        }));\r\n\r\n        setAllNotices(noticesWithPriority);\r\n        setNotices(noticesWithPriority);\r\n      } catch (err) {\r\n        console.error(\"Failed to load notices:\", err);\r\n        setError(\"공지사항을 불러오는데 실패했습니다.\");\r\n\r\n        // 에러 시 샘플 데이터\r\n        const sampleData = [\r\n          {\r\n            id: 1,\r\n            seq: \"2024-001\",\r\n            department: \"개발팀\",\r\n            content: \"시스템 업데이트 안내\",\r\n            date: \"2024-03-15\",\r\n            priority: \"high\",\r\n          },\r\n          {\r\n            id: 2,\r\n            seq: \"2024-002\",\r\n            department: \"인사팀\",\r\n            content: \"신입사원 환영회 개최\",\r\n            date: \"2024-03-14\",\r\n            priority: \"medium\",\r\n          },\r\n          {\r\n            id: 3,\r\n            seq: \"2024-003\",\r\n            department: \"총무팀\",\r\n            content: \"사무용품 신청 안내\",\r\n            date: \"2024-03-13\",\r\n            priority: \"low\",\r\n          },\r\n        ];\r\n        setAllNotices(sampleData);\r\n        setNotices(sampleData);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadNotices();\r\n  }, []);\r\n\r\n  // 검색어가 변경될 때 필터링 (로컬 필터링)\r\n  useEffect(() => {\r\n    if (!searchTerm.trim()) {\r\n      setNotices(allNotices);\r\n      return;\r\n    }\r\n\r\n    // 로컬에서 필터링\r\n    const filtered = allNotices.filter(\r\n      (notice) =>\r\n        notice.content?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        notice.department?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        notice.seq?.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    setNotices(filtered);\r\n  }, [searchTerm, allNotices]);\r\n\r\n  // 서버에서 검색 (필요한 경우)\r\n  const searchFromServer = async (query) => {\r\n    if (!query.trim()) {\r\n      setNotices(allNotices);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const data = await searchNotice(query);\r\n\r\n      const noticesWithPriority = data.map((notice, index) => ({\r\n        ...notice,\r\n        priority:\r\n          notice.priority ||\r\n          (index % 3 === 0 ? \"high\" : index % 3 === 1 ? \"medium\" : \"low\"),\r\n        date:\r\n          notice.date ||\r\n          notice.postDate ||\r\n          notice.registerDate ||\r\n          new Date().toISOString().split(\"T\")[0],\r\n      }));\r\n\r\n      setNotices(noticesWithPriority);\r\n    } catch (err) {\r\n      console.error(\"Failed to search notices:\", err);\r\n      setError(\"검색 중 오류가 발생했습니다.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 공지사항 추가 (로컬)\r\n  const addNotice = (notice) => {\r\n    const newNotice = {\r\n      ...notice,\r\n      id: Date.now(),\r\n      date: new Date().toISOString().split(\"T\")[0],\r\n    };\r\n    setAllNotices((prev) => [newNotice, ...prev]);\r\n    setNotices((prev) => [newNotice, ...prev]);\r\n  };\r\n\r\n  // 공지사항 삭제 (로컬)\r\n  const deleteNotice = (id) => {\r\n    setAllNotices((prev) => prev.filter((n) => n.id !== id));\r\n    setNotices((prev) => prev.filter((n) => n.id !== id));\r\n  };\r\n\r\n  // 새로고침\r\n  const refresh = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getAllNotices();\r\n      const noticesWithPriority = data.map((notice, index) => ({\r\n        ...notice,\r\n        priority:\r\n          notice.priority ||\r\n          (index % 3 === 0 ? \"high\" : index % 3 === 1 ? \"medium\" : \"low\"),\r\n        date:\r\n          notice.date ||\r\n          notice.postDate ||\r\n          notice.registerDate ||\r\n          new Date().toISOString().split(\"T\")[0],\r\n      }));\r\n      setAllNotices(noticesWithPriority);\r\n      setNotices(noticesWithPriority);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(\"새로고침 실패\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    notices,\r\n    searchTerm,\r\n    setSearchTerm,\r\n    loading,\r\n    error,\r\n    addNotice,\r\n    deleteNotice,\r\n    searchFromServer,\r\n    refresh,\r\n  };\r\n};\r\n\r\nexport default useNotices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}