pipeline {
    agent any

    environment {
        GIT_URL                = 'https://github.com/kimjieunchol/my-cicd-project.git'
        GIT_BRANCH             = 'main'
        GIT_ID                 = 'skala-github-id'
        IMAGE_NAME             = 'sk066-backend'
        IMAGE_TAG              = '1.0.0'
        IMAGE_REGISTRY_HOST    = 'amdp-registry.skala-ai.com'
        IMAGE_REGISTRY_PROJECT = 'skala25a'
        DOCKER_CREDENTIAL_ID   = 'skala-image-registry-id'
        K8S_NAMESPACE          = 'skala-practice'

        BUILDAH_ISOLATION      = 'chroot'
        STORAGE_DRIVER         = 'vfs'
    }

    options {
        disableConcurrentBuilds()
        timestamps()
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo '=== Clone Repository ==='
                checkout scm
            }
        }

        stage('Build with Maven') {
            steps {
                echo '=== Build Backend with Maven ==='
                dir('backend') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Compute Image Meta') {
            steps {
                script {
                    def hashcode = sh(script: "date +%s%N | sha256sum | cut -c1-12", returnStdout: true).trim()
                    env.FINAL_IMAGE_TAG = "${IMAGE_TAG}-${hashcode}"
                    env.IMAGE_REF       = "${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_PROJECT}/${IMAGE_NAME}:${FINAL_IMAGE_TAG}"

                    echo "=== Image Metadata ==="
                    echo "REGISTRY: ${IMAGE_REGISTRY_HOST}"
                    echo "IMAGE_REF: ${IMAGE_REF}"
                    echo "TAG: ${FINAL_IMAGE_TAG}"
                }
            }
        }

        stage('Image Build & Push (Buildah)') {
            steps {
                dir('backend') {
                    script {
                        withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIAL_ID, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PASS')]) {
                            sh """
                                set -eux

                                # Î†àÏßÄÏä§Ìä∏Î¶¨ Î°úÍ∑∏Ïù∏ (HTTPS Í∞ïÏ†ú, TLS Í≤ÄÏ¶ù ÎπÑÌôúÏÑ±Ìôî)
                                for i in 1 2 3; do
                                    echo "Login attempt \$i to ${IMAGE_REGISTRY_HOST}..."
                                    if echo "\${REGISTRY_PASS}" | sudo -E buildah login \
                                        --tls-verify=false \
                                        -u "\${REGISTRY_USER}" \
                                        --password-stdin \
                                        ${IMAGE_REGISTRY_HOST}; then
                                        echo "‚úÖ Login successful!"
                                        break
                                    fi
                                    if [ \$i -eq 3 ]; then
                                        echo "‚ùå Login failed after 3 attempts"
                                        exit 1
                                    fi
                                    sleep 3
                                done

                                # Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
                                echo "üî® Building image: ${IMAGE_REF}"
                                sudo -E buildah bud \
                                    --format docker \
                                    --tls-verify=false \
                                    -t ${IMAGE_REF} \
                                    -f Dockerfile .

                                # Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú
                                echo "üì§ Pushing image: ${IMAGE_REF}"
                                sudo -E buildah push --tls-verify=false ${IMAGE_REF}

                                # latest ÌÉúÍ∑∏ Ï∂îÍ∞Ä Î∞è Ìë∏Ïãú
                                echo "üè∑Ô∏è  Tagging and pushing latest..."
                                sudo -E buildah tag ${IMAGE_REF} ${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_PROJECT}/${IMAGE_NAME}:latest
                                sudo -E buildah push --tls-verify=false ${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_PROJECT}/${IMAGE_NAME}:latest

                                echo "‚úÖ Image build and push completed!"
                                
                                # Î°úÍ∑∏ÏïÑÏõÉ
                                sudo -E buildah logout ${IMAGE_REGISTRY_HOST} || true
                            """
                        }
                    }
                }
            }
        }

        stage('Update K8s Manifest') {
            steps {
                echo '=== Update Kubernetes Manifest ==='
                script {
                    sh """
                        echo "Updating k8s/sk066-backend-deploy.yaml with image: ${IMAGE_REF}"
                        sed -i 's|image: amdp-registry.skala-ai.com/skala25a/sk066-backend:.*|image: ${IMAGE_REF}|g' k8s/sk066-backend-deploy.yaml
                        echo "‚úÖ Deployment manifest updated"
                        
                        # Î≥ÄÍ≤Ω ÎÇ¥Ïö© ÌôïÏù∏
                        echo "=== Updated manifest ==="
                        grep "image:" k8s/sk066-backend-deploy.yaml
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo '=== Deploy to Kubernetes ==='
                sh """
                    echo "Deploying to Kubernetes namespace: ${K8S_NAMESPACE}"
                    kubectl apply -f k8s/sk066-backend-deploy.yaml -n ${K8S_NAMESPACE}
                    kubectl rollout status deployment/sk066-backend -n ${K8S_NAMESPACE} --timeout=5m
                    echo "‚úÖ Deployment completed successfully"
                """
            }
        }
    }

    post {
        always {
            sh '''
                sudo -E buildah rm --all || true
                sudo -E buildah rmi --prune || true
            '''
            cleanWs()
        }
        success { echo '‚úÖ Pipeline succeeded!' }
        failure { echo '‚ùå Pipeline failed!' }
    }
}